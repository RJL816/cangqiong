(function ()
{
    var oManager = com.kingdee.bos.qing.framework.common.MultilanguageManager;
    var oPackage = com.kingdee.bos.qing.modeler.modelset.source.ui;
    oManager.registPackageResources(oPackage,
    {
        dataSourceManage: "Data Source Manage",
        search: "search",
        searchContent: "Please enter the search content",
        allType: "All types",
        database: "Database",
        file: "File",
        ERPCloud: "ERPCloud",
        publicDataSource: "Public data source",
        editSuccess: "Edit successfully.",
        sourceRefBySingleModel: 'The "#1" data source connection has been referenced by the "#2" model. Please delete the data source reference information in the model before deleting the data source connection.',
        sourceRefBySingleDeploy: 'The "#1" data source connection is referenced by the deployed model "#2". Undeploy the model before deleting the data source connection.',
        sourceRefByMultipleModel: 'The "#1" data source connection has been referenced by "#2" and other #3 models. Please delete the data source reference information in the model before deleting the data source connection.',
        sourceRefByMultipleDeploy: 'The "#1" data source connection has been referenced by #3 deployed models including #2. Please undeploy the model before deleting the data source connection.',
        confirmDeleteSource: "Are you sure to delete the data source connection?",
        deleteSourceSuccess: "Deleting the data source connection succeeded. Procedure",
        createSourceConnection: "New data source connection",
        businessEntity: "Business entity",
        DBCenter: "Data center",
        modelSet: "ModelSet",
        creator: "creator:",
        publicSourceCreator: "The public data source creator:",
        source: "source",
        SIDOrserverNameWithColon: "SID/ instance name:",
        dbWithColon: "database:",
        modeWithColon: "mode:",
        serverWithColon: "server:",
        sourceType: "type:",
        editSource: "edit",
        deleteSource: "delete",
        saveSuccess: "Creating a connection to the data source succeeded.",
        createNewDatabase: "Create a new data source",
        reSourceAuthToMe: "Import the data source authorized to me",
        selectDataSourceType: "Select data source type",
        selectAnDataSource: "Please select a data source.",
        connectDbServer: "Connecting to the database server",
        emptyName: "Please enter name.",
        nameTooLong: "The name contains a maximum of 50 characters.",
        duplicateName: "Name duplication.",
        duplicateHashcode: "A data source connection with the same connection information already exists.",
        name: "name",
        connectionName: "Connection name",
        editSourceConnection: "Edit data source connection",
        sourceAlreadyExists: "The same data source connection already exists. Please select another one.",
        noAlternativeSource: "There is currently no alternative data source.",
        noAuthPublicSource: "No public data source authorized to me yet.",
        source_no_found: "The selected data source has been deleted. Please select another data source.",
        noCurrentModelSetPerm: "The author or administrator of the current ModelSet has removed you from the collaboration member and is unable to do so.",
        noDBCenterPerm: "If no data center permission is available, contact the administrator to assign the permission.",
        optionalModelSet: "Optional set of models",
        modelSetCreator: "This ModelSet was created by:",
        modelSetHelpIconTips: "The model sets to choose from include the current ModelSet, the ModelSet that is deployed and licensed to me (non-system preset ModelSet). When selecting the current ModelSet, all models under the ModelSet can be used. When you select another ModelSet, you can use the models that have been deployed under that ModelSet and that are licensed to me.",
        sourceIsRefenrenced: "Failed to delete. The data source connection has been referenced.",
        modelSetNotExist: "The ModelSet has been deleted and the operation failed.",
        modelSetNotExist: "The model set has been deleted and the operation failed.",
        createdOfModelSet: "Collection of models I created",
        cooperationOfModelSet: "Collection of models I'm collaborating on",
        authorizeOfModelSet: "Collection of models I'm authorized",
        noAvailableModelset: "No available modelset",

        /**uploadFile*/
        reupload: "Reupload",
        pleaseUploadFile: "Please upload file first.",
        customSplitSignShouldNotNull: "Custom split sign is null.",
        uploadSameNameFile: "Please upload the same name file",
        noCorrespondingSheetInThisFile: "Not exist #1 work sheet in this file, please reupload.",
        uploadFile: "Upload file",
        comma: "Comma",
        semicolon: "Semicolon",
        space: "Space",
        tabs: "Tabs",
        custom: "Custom",
        doubleQuotationMark: "Double quotation",
        singleQuotationMark: "Single quotation",
        checkFirstFiftyLines: "Only 50 lines",
        checkFirstOneHundredLines: "Only 100 lines",
        checkWholeFile: "Whole file",
        acceptFile: "Accept #1 file be not more than #2M",
        acceptDBFile: "Accept #1 file be not more than 100M",
        splitSign: "Split sign",
        characterSet: "Char set",
        textLimitSign: "Limit sign",
        defineTypeRowCount: "Check rows",
        unsupportedBrowser: "The current Browser is not supported.",
        fileTooLarge: "The file size exceeds the maximum limit, please upload the file again.",
        fileTypeIncorrect: "File type incorrect.",
        uploadSuccess: "Upload successfully.",
        uploadFail: "Upload fail.",
        uploadFileNoAccess: "No access to upload file.",
        clickOrDrag: "Click or drag file for uploading",
        clickForUploadFile: "Click for uploading",
        uploadFileIsNull: "File is empty, please reupload.",
        noCorrespondingXmlNodeInThisFile: "Not exist #1 xml node in this file, please reupload.",
        download: "download",

        /**openAPI**/
        RESTfulDataSet: "RESTful data set ",
        programDataSet: "Program data set ",
        RESTfulDataSetUrlPlaceholder: "please enter the full URL path",
        programDataSetPlaceholder: "please enter Java classes full path",
        urlNotNull :"URL cannot be empty.",
        classNameNotNull: "The Java class full path cannot be empty.",
        OpenAPI: "OpenAPI",
        noCorrespondingTable: "There is no corresponding table, please re-enter the URL.",
        error2061100: "Please fill in the correct URL, if it is the root path, it must end with.qdata. ",
        error2061103: "PageSize must be between 2000 and 20000. ",
        error2061104: "Abnormal parameters, pageNo and selectedFields are automatically supplemented by the system parameters, which do not need to be filled by the user manually.",
        error2062100: "Interface ITableDataProvider not implemented.",
        error2061301: "Please fill in the correct authentication information.",
        error2061302: "Please complete the authentication information.",
        error2061303: "The digest authentication server challenge header parameter is abnormal.",
        authType: "Authentication type",
        noAuth: "None",
        cosmicAuth: "The cosmic authentication",
        httpAuthHelpIconTips: "Provides common HTTP identity authentication. You can specify the authentication mode for identity authentication  ",
        classPath: "Class path",
        sourceDisabled: "(Some dataSource is disabled in current Qing Modeler License model)",
        viewDetails:"view the help documentation"

     });

    oPackage = com.kingdee.bos.qing.modeler.modelset.source.model;
    oManager.registPackageResources(oPackage,
    {
        businessEntity: "Business entity",
        DBCenter: "Data center",
        ERPCloudBusinessEntity: "ERPCloud-businessEntity",
        ERPCloudDBCenter: "ERPCloud-DBCenter",
        publicDBSource: "PublicDataSource-database",
        modelSet: "ModelSet",
        RESTfulDataSet: "RESTful data set ",
        programDataSet: "Program data set ",
    });

    oPackage = com.kingdee.bos.qing.modeler.modelset.source.common;
    oManager.registPackageResources(oPackage,
        {
            creator: "creator:",
            editSource: "edit",
            deleteSource: "delete",
            SIDOrserverNameWithColon: "SID/ instance name:",
            dbWithColon: "database:",
            modeWithColon: "mode:",
            serverWithColon: "server:",
            businessEntity: "Business entity",
            sourceType: "type:",
            source: "source",
            ERPCloud: "ERPCloud",
            DBCenter: "Data center",
            publicSourceCreator: "The public data source creator:",
            publicDataSource: "Public data source",
            modelSet: "ModelSet",
            modelSetCreator: "This ModelSet was created by:",

            clientId: "Client coding",
            clientSecret: "Client key",
            scope: "Competence",
            authURL: "Certification URL",
            local: "Current system",
            other: "Other system",
            auto: "Automatically obtain the current user information",
            custom: "User-defined Fill in user information",
            mobile: "Mobile phone",
            email: "Email",
            appId: "System coding",
            appSecret: "Authentication key",
            cosmicType: "Authentication server",
            serverAddress: "Server address",
            forExample: "For example:",
            accountid: "Data center ID",
            tenantid: "The tenant id",
            userValue: "User type value",
            userSourceType: "User source type",
            usertype: "The user types",
            proxyUser: "Proxy User",
            tokenEnhanced: "Enhanced Token Authentication",
            userNameNotNull: "User name cannot be empty.",
            userNameTooLong: "Username must be no longer than 50 characters.",
            userNameNotSpecial: "Username can only named by letter, number or underline.",
            mimaNotNull: "The password cannot be empty.",
            mimaTooLong: "Password length cannot exceed 100 characters.",
            clientIdNotNull: "Client code cannot be null.",
            clientIdTooLong: "The client encoding length cannot exceed 50 characters.",
            clientSecretNotNull: "Client key cannot be empty.",
            clientSecretTooLong: "Client key length cannot exceed 100 characters.",
            scopeTooLong: "Permission range length cannot exceed 50 characters.",
            authURLNotNull: "Authentication URL cannot be empty.",
            authURLTooLong: "Authentication URL length cannot exceed 100 characters.",
            appIdNotNull: "System code cannot be empty.",
            appIdTooLong: "System code length cannot exceed 50 characters.",
            appSecretNotNull: "Authentication key cannot be empty.",
            appSecretTooLong: "Authentication key length cannot exceed 100 characters.",
            serverAddressNotNull: "Server address cannot be empty.",
            serverAddressTooLong: "Server addresses cannot exceed 100 characters in length.",
            accountIdTooLong: "Data center ID length cannot exceed 50 characters.",
            userInfoNotNull: "User information cannot be empty.",
            userInfoTooLong: "User information length cannot exceed 50 characters.",
            tenantIdTooLong: "Tenant ID length cannot exceed 50 characters.",
            userName: "User name",
            mima: "Password",
            OpenAPI: "OpenAPI",
            authSettings: "Authentication Settings",
            tokenURL: "Gets the API address of access_token",
        });

})();