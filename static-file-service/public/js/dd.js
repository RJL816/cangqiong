"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackJsonp_bos-platform"] = self["webpackJsonp_bos-platform"] || []).push([[5840],{

/***/ "./src/plugin/mobile/dd/plugin.js":
/*!****************************************!*\
  !*** ./src/plugin/mobile/dd/plugin.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n__webpack_require__(/*! core-js/modules/es.symbol.js */ \"../../node_modules/core-js/modules/es.symbol.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"../../node_modules/core-js/modules/es.symbol.description.js\");\n__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ \"../../node_modules/core-js/modules/es.symbol.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.from.js */ \"../../node_modules/core-js/modules/es.array.from.js\");\n__webpack_require__(/*! core-js/modules/es.array.is-array.js */ \"../../node_modules/core-js/modules/es.array.is-array.js\");\n__webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"../../node_modules/core-js/modules/es.array.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.array.slice.js */ \"../../node_modules/core-js/modules/es.array.slice.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"../../node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.define-property.js */ \"../../node_modules/core-js/modules/es.object.define-property.js\");\n__webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ \"../../node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\n__webpack_require__(/*! core-js/modules/es.string.iterator.js */ \"../../node_modules/core-js/modules/es.string.iterator.js\");\n__webpack_require__(/*! core-js/modules/es.weak-map.js */ \"../../node_modules/core-js/modules/es.weak-map.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"../../node_modules/core-js/modules/web.dom-collections.iterator.js\");\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = main;\n__webpack_require__(/*! core-js/modules/es.array.concat.js */ \"../../node_modules/core-js/modules/es.array.concat.js\");\n__webpack_require__(/*! core-js/modules/es.array.find.js */ \"../../node_modules/core-js/modules/es.array.find.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"../../node_modules/core-js/modules/es.array.includes.js\");\n__webpack_require__(/*! core-js/modules/es.date.to-string.js */ \"../../node_modules/core-js/modules/es.date.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"../../node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"../../node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"../../node_modules/core-js/modules/es.regexp.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.string.includes.js */ \"../../node_modules/core-js/modules/es.string.includes.js\");\n__webpack_require__(/*! core-js/modules/es.string.starts-with.js */ \"../../node_modules/core-js/modules/es.string.starts-with.js\");\nvar _global = _interopRequireWildcard(__webpack_require__(/*! @/global */ \"./src/global/index.js\"));\nvar _console = _interopRequireDefault(__webpack_require__(/*! ../../../api/console */ \"./src/api/console.js\"));\nvar _toolUtils = __webpack_require__(/*! @/util/toolUtils */ \"./src/util/toolUtils.js\");\nvar _const = __webpack_require__(/*! ../../const */ \"./src/plugin/const.js\");\nvar _clientEnv = __webpack_require__(/*! ../../clientEnv */ \"./src/plugin/clientEnv.js\");\nvar _promiseUtil = __webpack_require__(/*! @/api/promiseUtil */ \"./src/api/promiseUtil.js\");\nvar _intlApi = __webpack_require__(/*! @/i18n/intlApi */ \"./src/i18n/intlApi.js\");\nvar _PluginManager = __webpack_require__(/*! @/plugin/PluginManager */ \"./src/plugin/PluginManager.js\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return { \"default\": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n[\"default\"] = e, t && t.set(e, n), n; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction main(_ref, callback) {\n  var loadjs = _ref.loadjs,\n    releaseResource = _ref.releaseResource;\n  var plugin = {\n    // 设置标题\n    setWebViewTitle: function setWebViewTitle(title) {\n      window.dd.biz.navigation.setTitle({\n        title: title,\n        // 控制标题文本，空字符串表示显示默认文本\n        onSuccess: function onSuccess(result) {\n          /* 结构\n            {\n            } */\n        },\n        onFail: function onFail( /* err */) {}\n      });\n    },\n    // 旋转界面\n    rotateUI: function rotateUI(data, callbackToServer) {\n      var direction = Object.prototype.toString.call(data) === '[object Object]' ? data.direction : data;\n      var directions = ['portrait', 'landscape'];\n      directions[direction] === 'portrait'\n      // 竖屏重置旋转屏幕\n      ? window.dd.device.screen.resetView({\n        onSuccess: function onSuccess(result) {\n          callbackToServer(result);\n        },\n        onFail: function onFail(err) {\n          callbackToServer(err);\n        }\n      })\n      // 横屏顺时针旋转90度\n      : window.dd.device.screen.rotateView({\n        showStatusBar: true,\n        // 否显示statusbar\n        clockwise: true,\n        // 是否顺时针方向\n        onSuccess: function onSuccess(result) {\n          callbackToServer(result);\n        },\n        onFail: function onFail(err) {\n          callbackToServer(err);\n        }\n      });\n    },\n    // 预览图片\n    previewImage: function previewImage(data, callback) {\n      var current = data.current,\n        urls = data.urls;\n      var list = urls.length > 0 ? urls : [current];\n      current && window.dd.biz.util.previewImage({\n        urls: list,\n        // 图片地址列表\n        current: current,\n        // 当前显示的图片链接\n        onSuccess: function onSuccess(result) {\n          callback(result);\n        },\n        onFail: function onFail(err) {\n          callback(err);\n        }\n      });\n    },\n    // 获取设备语言信息\n    getDevicedLang: function getDevicedLang(data, callback) {\n      var qingUserAgent = window.navigator.userAgent;\n      var langMsg = qingUserAgent.split(' ').find(function (item) {\n        return item.startsWith('language');\n      }) || 'language/zh-Hans';\n      // const lang = langMsg.indexOf('zh') > -1 ? 'zh_CN' : 'en_US'\n      var lang = '';\n      // 苹果：zh-Hant、安卓：zh-HK、zh-TW\n      if (/zh-Hant|zh-HK|zh-TW/.test(langMsg)) {\n        lang = 'zh_TW';\n      } else if (langMsg.includes('zh')) {\n        lang = 'zh_CN';\n      } else {\n        lang = (0, _intlApi.getLanguage)(langMsg);\n      }\n      var callbackData = {\n        success: true,\n        data: lang\n      };\n      callback(callbackData);\n    },\n    // 关闭当前轻应用\n    closeWebView: function closeWebView() {\n      // iOS、Android\n      window.dd.biz.navigation.close({\n        onSuccess: function onSuccess() {},\n        onFail: function onFail(err) {\n          _console[\"default\"].error('close 关闭当前轻应用失败', err);\n        }\n      });\n      if ((0, _clientEnv.isDdWindowDesktop)()) {\n        // windows客户端调用close接口不生效，需要调用quit接口\n        window.dd.biz.navigation.quit({\n          onSuccess: function onSuccess() {},\n          onFail: function onFail(err) {\n            _console[\"default\"].error('quit 关闭当前轻应用失败', err);\n          }\n        });\n      }\n    },\n    // 扫码\n    scanQRCode: function scanQRCode(data, callback) {\n      window.dd.biz.util.scan({\n        type: 'all',\n        // type为qrCode(二维码)、barCode(条形码)、all(全部)\n        onSuccess: function onSuccess(result) {\n          var args = {\n            success: true,\n            data: {\n              qrcode_str: result.text\n            }\n          };\n          callback(args);\n        },\n        onFail: function onFail(err) {\n          _console[\"default\"].log('扫码异常', err);\n        }\n      });\n    },\n    releasePageBeforeClose: function releasePageBeforeClose(data) {\n      if ((0, _toolUtils.getMobileOS)().includes('Android')) {\n        document.addEventListener('backbutton', function (e) {\n          // 如果是page，并且page的config设置需要发送关闭请求到后端\n          var shouldCLoseWebView = data.shouldCLoseWebView;\n          var requestClosePage = data.requestClosePage;\n          if (requestClosePage()) {\n            // 请求服务器关闭页面\n            e.preventDefault();\n            return;\n          }\n          if (shouldCLoseWebView && shouldCLoseWebView()) {\n            try {\n              releaseResource(); // 通知释放服务器页面资源\n            } catch (error) {\n              _console[\"default\"].error(error);\n            }\n            window.dd.biz.navigation.close({\n              onSuccess: function onSuccess() {},\n              onFail: function onFail(err) {\n                _console[\"default\"].log('关闭当前轻应用失败', err);\n              }\n            });\n            return;\n          }\n          if (window.history.length <= 1) {\n            window.dd.biz.navigation.close({\n              onSuccess: function onSuccess() {},\n              onFail: function onFail(err) {\n                _console[\"default\"].log('关闭当前轻应用失败', err);\n              }\n            });\n          } else {\n            // window.history.back()\n          }\n        });\n      } else if ((0, _toolUtils.getMobileOS)().includes('iOS')) {\n        window.dd.biz.navigation.setLeft({\n          control: true,\n          // 是否控制点击事件，true 控制，false 不控制， 默认false\n          text: '',\n          // 控制显示文本，空字符串表示显示默认文本\n          onSuccess: function onSuccess(result) {\n            // 如果是page，并且page的config设置需要发送关闭请求到后端\n            var shouldCLoseWebView = data.shouldCLoseWebView;\n            var requestClosePage = data.requestClosePage;\n            if (requestClosePage()) {\n              // 请求服务器关闭页面\n              return;\n            }\n            if (shouldCLoseWebView && shouldCLoseWebView()) {\n              try {\n                releaseResource(); // 通知释放服务器页面资源\n              } catch (error) {\n                _console[\"default\"].error(error);\n              }\n              window.dd.biz.navigation.close({\n                onSuccess: function onSuccess() {},\n                onFail: function onFail(err) {\n                  _console[\"default\"].log('关闭当前轻应用失败', err);\n                }\n              });\n              return;\n            }\n            if (window.history.length <= 1) {\n              window.dd.biz.navigation.close({\n                onSuccess: function onSuccess() {},\n                onFail: function onFail(err) {\n                  _console[\"default\"].log('关闭当前轻应用失败', err);\n                }\n              });\n            } else {\n              window.history.back();\n            }\n          },\n          onFail: function onFail(err) {\n            _console[\"default\"].log('返回失败', err);\n          }\n        });\n      }\n    }\n  };\n  var permissionPlugin = {\n    // 语音转文字\n    translateVoice: function translateVoice(voiceResult, callback) {\n      window.dd.device.audio.translateVoice({\n        mediaId: voiceResult.mediaId,\n        duration: voiceResult.duration,\n        onSuccess: function onSuccess(res) {\n          // 语音转换的文字内容\n          var args = {\n            success: true,\n            data: res.content\n          };\n          callback(args);\n        }\n      });\n    },\n    // 开始录音\n    startVoice: function startVoice() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      window.dd.device.audio.startRecord({\n        onSuccess: function onSuccess() {\n          // 支持最长为300秒（包括）的音频录制，默认60秒(包括)。\n        },\n        onFail: function onFail(err) {\n          _console[\"default\"].error('startRecord: ', err);\n        }\n      });\n      window.dd.device.audio.onRecordEnd({\n        onSuccess: function onSuccess(res) {\n          // res.mediaId; // 停止播放音频MediaID\n          // res.duration; // 返回音频的时长，单位：秒\n          permissionPlugin.translateVoice(res, callback);\n        },\n        onFail: function onFail(err) {\n          _console[\"default\"].error('onRecordEnd: ', err);\n        }\n      });\n    },\n    // 停止录音\n    stopVoice: function stopVoice() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      window.dd.device.audio.stopRecord({\n        onSuccess: function onSuccess(res) {\n          // res.mediaId; // 返回音频的MediaID，可用于本地播放和音频下载\n          // res.duration; // 返回音频的时长，单位：秒\n          permissionPlugin.translateVoice(res, callback);\n        },\n        onFail: function onFail(err) {\n          _console[\"default\"].error('stopRecord: ', err);\n        }\n      });\n    },\n    // 设置粘贴板内容\n    setClipboardData: function setClipboardData(data) {\n      window.dd.biz.clipboardData.setData({\n        text: data,\n        // 要复制粘贴板的内容\n        onSuccess: function onSuccess(result) {\n          _console[\"default\"].log('copyToClipboard:', result);\n        },\n        onFail: function onFail(err) {\n          _console[\"default\"].error('copyToClipboard:', err);\n        }\n      });\n    },\n    // 打开新窗口，目前在pc端使用\n    newTab: function newTab(data) {\n      var url = data.url;\n      window.dd.biz.util.invokeWorkbench({\n        app_url: url,\n        app_info: {\n          app_refresh_if_exist: true,\n          app_active_if_exist: true\n        },\n        onSuccess: function onSuccess(result) {\n          _console[\"default\"].log('调用成功', result);\n        },\n        onFail: function onFail(err) {\n          _console[\"default\"].log('调用新窗口异常', err);\n        }\n      });\n    }\n  };\n  loadjs(window.__kd_cdnPath__ + '/public/thirdjs/dd/dingtalk.open.js', {\n    success: function success() {\n      _console[\"default\"].log('钉钉SDK已经加载');\n      (0, _PluginManager.loadDynamicPlugin)(plugin); // 把插件api挂载在全局指定的插件名上\n      callback && callback(true); // 插件安装完，回调\n      // window.iaf('rotateUI', { data: 0 })\n      (0, _promiseUtil.getRootConfigPromise)().then(function (config) {\n        (0, _clientEnv.getAppTrdAuthData)(_const.DING_TALK).then(function (authData) {\n          if ((0, _clientEnv.isAuthSuccess)(authData)) {\n            var data = authData.data;\n            setWXConfig(data);\n          } else if (_global[\"default\"][_global.KD_PLUGIN]) {\n            _console[\"default\"].error(\"\\u9274\\u6743\\u5931\\u8D25\\uFF0CgetAppTrdAuthData.do\\u63A5\\u53E3\\u8FD4\\u56DE\\u6570\\u636E\\uFF1A\".concat(JSON.stringify(authData)));\n            _global[\"default\"][_global.KD_PLUGIN][_const.AUTH_RESULT] = authData;\n            _global[\"default\"][_global.KD_PLUGIN][_const.AUTH_API_WHITE_LIST] = ['setClipboardData'];\n          }\n        });\n      });\n    },\n    error: function error() {\n      _console[\"default\"].error('钉钉SDK加载失败');\n      callback && callback(false);\n    }\n  });\n  function setWXConfig(data) {\n    var _data$config = data === null || data === void 0 ? void 0 : data.config,\n      signature = _data$config.signature,\n      timestamp = _data$config.timestamp,\n      nonce = _data$config.nonce,\n      corpid = _data$config.eid,\n      agentId = _data$config.agentId;\n    var clientApiList = window.clientApiList || [];\n    window.dd.config({\n      agentId: agentId,\n      // 必填，微应用ID\n      corpId: corpid,\n      // 必填，企业ID\n      timeStamp: timestamp,\n      // 必填，生成签名的时间戳\n      nonceStr: nonce,\n      // 必填，自定义固定字符串。\n      signature: signature,\n      // 必填，签名\n      // type: '0/1', // 选填。0表示微应用的jsapi,1表示服务窗的jsapi；不填默认为0。该参数从dingtalk.js的0.8.3版本开始支持\n      jsApiList: ['device.audio.startRecord', 'device.audio.stopRecord', 'device.audio.translateVoice', 'biz.clipboardData.setData', 'biz.util.invokeWorkbench'].concat(_toConsumableArray(clientApiList)) // 必填，需要使用的jsapi列表，注意：不要带dd。\n    });\n    window.dd.error(function (err) {\n      _console[\"default\"].error('dd 鉴权失败: ' + err);\n    });\n    window.dd.ready(function (info) {\n      _console[\"default\"].log('钉钉鉴权成功: ', info);\n      (0, _PluginManager.loadDynamicPlugin)(permissionPlugin);\n    });\n  }\n}\n\n//# sourceURL=webpack://bos-platform/./src/plugin/mobile/dd/plugin.js?");

/***/ })

}]);