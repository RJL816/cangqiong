/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkkd_libs"] = self["webpackChunkkd_libs"] || []).push([[60],{

/***/ "../../node_modules/@babel/runtime-corejs3/core-js-stable/object/set-prototype-of.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/@babel/runtime-corejs3/core-js-stable/object/set-prototype-of.js ***!
  \*******************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! core-js-pure/stable/object/set-prototype-of */ \"../../node_modules/core-js-pure/stable/object/set-prototype-of.js\");\n\n//# sourceURL=webpack://kd-libs/../../node_modules/@babel/runtime-corejs3/core-js-stable/object/set-prototype-of.js?");

/***/ }),

/***/ "../../node_modules/@babel/runtime-corejs3/core-js-stable/symbol/for.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/@babel/runtime-corejs3/core-js-stable/symbol/for.js ***!
  \******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! core-js-pure/stable/symbol/for */ \"../../node_modules/core-js-pure/stable/symbol/for.js\");\n\n//# sourceURL=webpack://kd-libs/../../node_modules/@babel/runtime-corejs3/core-js-stable/symbol/for.js?");

/***/ }),

/***/ "../../node_modules/@babel/runtime-corejs3/core-js/is-iterable.js":
/*!************************************************************************!*\
  !*** ../../node_modules/@babel/runtime-corejs3/core-js/is-iterable.js ***!
  \************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! core-js-pure/features/is-iterable */ \"../../node_modules/core-js-pure/features/is-iterable.js\");\n\n//# sourceURL=webpack://kd-libs/../../node_modules/@babel/runtime-corejs3/core-js/is-iterable.js?");

/***/ }),

/***/ "../../node_modules/lodash.isequal/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/lodash.isequal/index.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports =  true && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && \"object\" == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/lodash.isequal/index.js?");

/***/ }),

/***/ "../../node_modules/react-grid-layout/build/GridItem.js":
/*!**************************************************************!*\
  !*** ../../node_modules/react-grid-layout/build/GridItem.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react?42c7\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(/*! prop-types */ \"../../node_modules/prop-types/index.js\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDraggable = __webpack_require__(/*! react-draggable */ \"../../node_modules/react-grid-layout/node_modules/react-draggable/dist/react-draggable.js\");\n\nvar _reactResizable = __webpack_require__(/*! react-resizable */ \"../../node_modules/react-resizable/index.js\");\n\nvar _utils = __webpack_require__(/*! ./utils */ \"../../node_modules/react-grid-layout/build/utils.js\");\n\nvar _classnames = __webpack_require__(/*! classnames */ \"../../node_modules/classnames/index.js\");\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * An individual item within a ReactGridLayout.\n */\nvar GridItem = function (_React$Component) {\n  _inherits(GridItem, _React$Component);\n\n  function GridItem() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, GridItem);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      resizing: null,\n      dragging: null,\n      className: \"\"\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  // Helper for generating column width\n  GridItem.prototype.calcColWidth = function calcColWidth() {\n    var _props = this.props,\n        margin = _props.margin,\n        containerPadding = _props.containerPadding,\n        containerWidth = _props.containerWidth,\n        cols = _props.cols;\n\n    return (containerWidth - margin[0] * (cols - 1) - containerPadding[0] * 2) / cols;\n  };\n\n  /**\n   * Return position on the page given an x, y, w, h.\n   * left, top, width, height are all in pixels.\n   * @param  {Number}  x             X coordinate in grid units.\n   * @param  {Number}  y             Y coordinate in grid units.\n   * @param  {Number}  w             W coordinate in grid units.\n   * @param  {Number}  h             H coordinate in grid units.\n   * @return {Object}                Object containing coords.\n   */\n\n\n  GridItem.prototype.calcPosition = function calcPosition(x, y, w, h, state) {\n    var _props2 = this.props,\n        margin = _props2.margin,\n        containerPadding = _props2.containerPadding,\n        rowHeight = _props2.rowHeight;\n\n    var colWidth = this.calcColWidth();\n\n    var out = {\n      left: Math.round((colWidth + margin[0]) * x + containerPadding[0]),\n      top: Math.round((rowHeight + margin[1]) * y + containerPadding[1]),\n      // 0 * Infinity === NaN, which causes problems with resize constraints;\n      // Fix this if it occurs.\n      // Note we do it here rather than later because Math.round(Infinity) causes deopt\n      width: w === Infinity ? w : Math.round(colWidth * w + Math.max(0, w - 1) * margin[0]),\n      height: h === Infinity ? h : Math.round(rowHeight * h + Math.max(0, h - 1) * margin[1])\n    };\n\n    if (state && state.resizing) {\n      out.width = Math.round(state.resizing.width);\n      out.height = Math.round(state.resizing.height);\n    }\n\n    if (state && state.dragging) {\n      out.top = Math.round(state.dragging.top);\n      out.left = Math.round(state.dragging.left);\n    }\n\n    return out;\n  };\n\n  /**\n   * Translate x and y coordinates from pixels to grid units.\n   * @param  {Number} top  Top position (relative to parent) in pixels.\n   * @param  {Number} left Left position (relative to parent) in pixels.\n   * @return {Object} x and y in grid units.\n   */\n\n\n  GridItem.prototype.calcXY = function calcXY(top, left) {\n    var _props3 = this.props,\n        margin = _props3.margin,\n        cols = _props3.cols,\n        rowHeight = _props3.rowHeight,\n        w = _props3.w,\n        h = _props3.h,\n        maxRows = _props3.maxRows;\n\n    var colWidth = this.calcColWidth();\n\n    // left = colWidth * x + margin * (x + 1)\n    // l = cx + m(x+1)\n    // l = cx + mx + m\n    // l - m = cx + mx\n    // l - m = x(c + m)\n    // (l - m) / (c + m) = x\n    // x = (left - margin) / (coldWidth + margin)\n    var x = Math.round((left - margin[0]) / (colWidth + margin[0]));\n    var y = Math.round((top - margin[1]) / (rowHeight + margin[1]));\n\n    // Capping\n    x = Math.max(Math.min(x, cols - w), 0);\n    y = Math.max(Math.min(y, maxRows - h), 0);\n\n    return { x: x, y: y };\n  };\n\n  /**\n   * Given a height and width in pixel values, calculate grid units.\n   * @param  {Number} height Height in pixels.\n   * @param  {Number} width  Width in pixels.\n   * @return {Object} w, h as grid units.\n   */\n\n\n  GridItem.prototype.calcWH = function calcWH(_ref) {\n    var height = _ref.height,\n        width = _ref.width;\n    var _props4 = this.props,\n        margin = _props4.margin,\n        maxRows = _props4.maxRows,\n        cols = _props4.cols,\n        rowHeight = _props4.rowHeight,\n        x = _props4.x,\n        y = _props4.y;\n\n    var colWidth = this.calcColWidth();\n\n    // width = colWidth * w - (margin * (w - 1))\n    // ...\n    // w = (width + margin) / (colWidth + margin)\n    var w = Math.round((width + margin[0]) / (colWidth + margin[0]));\n    var h = Math.round((height + margin[1]) / (rowHeight + margin[1]));\n\n    // Capping\n    w = Math.max(Math.min(w, cols - x), 0);\n    h = Math.max(Math.min(h, maxRows - y), 0);\n    return { w: w, h: h };\n  };\n\n  /**\n   * This is where we set the grid item's absolute placement. It gets a little tricky because we want to do it\n   * well when server rendering, and the only way to do that properly is to use percentage width/left because\n   * we don't know exactly what the browser viewport is.\n   * Unfortunately, CSS Transforms, which are great for performance, break in this instance because a percentage\n   * left is relative to the item itself, not its container! So we cannot use them on the server rendering pass.\n   *\n   * @param  {Object} pos Position object with width, height, left, top.\n   * @return {Object}     Style object.\n   */\n\n\n  GridItem.prototype.createStyle = function createStyle(pos) {\n    var _props5 = this.props,\n        usePercentages = _props5.usePercentages,\n        containerWidth = _props5.containerWidth,\n        useCSSTransforms = _props5.useCSSTransforms;\n\n\n    var style = void 0;\n    // CSS Transforms support (default)\n    if (useCSSTransforms) {\n      style = (0, _utils.setTransform)(pos);\n    } else {\n      // top,left (slow)\n      style = (0, _utils.setTopLeft)(pos);\n\n      // This is used for server rendering.\n      if (usePercentages) {\n        style.left = (0, _utils.perc)(pos.left / containerWidth);\n        style.width = (0, _utils.perc)(pos.width / containerWidth);\n      }\n    }\n\n    return style;\n  };\n\n  /**\n   * Mix a Draggable instance into a child.\n   * @param  {Element} child    Child element.\n   * @return {Element}          Child wrapped in Draggable.\n   */\n\n\n  GridItem.prototype.mixinDraggable = function mixinDraggable(child) {\n    return _react2.default.createElement(\n      _reactDraggable.DraggableCore,\n      {\n        onStart: this.onDragHandler(\"onDragStart\"),\n        onDrag: this.onDragHandler(\"onDrag\"),\n        onStop: this.onDragHandler(\"onDragStop\"),\n        handle: this.props.handle,\n        cancel: \".react-resizable-handle\" + (this.props.cancel ? \",\" + this.props.cancel : \"\")\n      },\n      child\n    );\n  };\n\n  /**\n   * Mix a Resizable instance into a child.\n   * @param  {Element} child    Child element.\n   * @param  {Object} position  Position object (pixel values)\n   * @return {Element}          Child wrapped in Resizable.\n   */\n\n\n  GridItem.prototype.mixinResizable = function mixinResizable(child, position) {\n    var _props6 = this.props,\n        cols = _props6.cols,\n        x = _props6.x,\n        minW = _props6.minW,\n        minH = _props6.minH,\n        maxW = _props6.maxW,\n        maxH = _props6.maxH;\n\n    // This is the max possible width - doesn't go to infinity because of the width of the window\n\n    var maxWidth = this.calcPosition(0, 0, cols - x, 0).width;\n\n    // Calculate min/max constraints using our min & maxes\n    var mins = this.calcPosition(0, 0, minW, minH);\n    var maxes = this.calcPosition(0, 0, maxW, maxH);\n    var minConstraints = [mins.width, mins.height];\n    var maxConstraints = [Math.min(maxes.width, maxWidth), Math.min(maxes.height, Infinity)];\n    return _react2.default.createElement(\n      _reactResizable.Resizable,\n      {\n        width: position.width,\n        height: position.height,\n        minConstraints: minConstraints,\n        maxConstraints: maxConstraints,\n        onResizeStop: this.onResizeHandler(\"onResizeStop\"),\n        onResizeStart: this.onResizeHandler(\"onResizeStart\"),\n        onResize: this.onResizeHandler(\"onResize\")\n      },\n      child\n    );\n  };\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n\n\n  GridItem.prototype.onDragHandler = function onDragHandler(handlerName) {\n    var _this2 = this;\n\n    return function (e, _ref2) {\n      var node = _ref2.node,\n          deltaX = _ref2.deltaX,\n          deltaY = _ref2.deltaY;\n\n      var handler = _this2.props[handlerName];\n      if (!handler) return;\n\n      var newPosition = { top: 0, left: 0 };\n\n      // Get new XY\n      switch (handlerName) {\n        case \"onDragStart\":\n          {\n            // TODO: this wont work on nested parents\n            var offsetParent = node.offsetParent;\n\n            if (!offsetParent) return;\n            var parentRect = offsetParent.getBoundingClientRect();\n            var clientRect = node.getBoundingClientRect();\n            newPosition.left = clientRect.left - parentRect.left + offsetParent.scrollLeft;\n            newPosition.top = clientRect.top - parentRect.top + offsetParent.scrollTop;\n            _this2.setState({ dragging: newPosition });\n            break;\n          }\n        case \"onDrag\":\n          if (!_this2.state.dragging) throw new Error(\"onDrag called before onDragStart.\");\n          newPosition.left = _this2.state.dragging.left + deltaX;\n          newPosition.top = _this2.state.dragging.top + deltaY;\n          _this2.setState({ dragging: newPosition });\n          break;\n        case \"onDragStop\":\n          if (!_this2.state.dragging) throw new Error(\"onDragEnd called before onDragStart.\");\n          newPosition.left = _this2.state.dragging.left;\n          newPosition.top = _this2.state.dragging.top;\n          _this2.setState({ dragging: null });\n          break;\n        default:\n          throw new Error(\"onDragHandler called with unrecognized handlerName: \" + handlerName);\n      }\n\n      var _calcXY = _this2.calcXY(newPosition.top, newPosition.left),\n          x = _calcXY.x,\n          y = _calcXY.y;\n\n      return handler.call(_this2, _this2.props.i, x, y, { e: e, node: node, newPosition: newPosition });\n    };\n  };\n\n  /**\n   * Wrapper around drag events to provide more useful data.\n   * All drag events call the function with the given handler name,\n   * with the signature (index, x, y).\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n\n\n  GridItem.prototype.onResizeHandler = function onResizeHandler(handlerName) {\n    var _this3 = this;\n\n    return function (e, _ref3) {\n      var node = _ref3.node,\n          size = _ref3.size;\n\n      var handler = _this3.props[handlerName];\n      if (!handler) return;\n      var _props7 = _this3.props,\n          cols = _props7.cols,\n          x = _props7.x,\n          i = _props7.i,\n          maxW = _props7.maxW,\n          minW = _props7.minW,\n          maxH = _props7.maxH,\n          minH = _props7.minH;\n\n      // Get new XY\n\n      var _calcWH = _this3.calcWH(size),\n          w = _calcWH.w,\n          h = _calcWH.h;\n\n      // Cap w at numCols\n\n\n      w = Math.min(w, cols - x);\n      // Ensure w is at least 1\n      w = Math.max(w, 1);\n\n      // Min/max capping\n      w = Math.max(Math.min(w, maxW), minW);\n      h = Math.max(Math.min(h, maxH), minH);\n\n      _this3.setState({ resizing: handlerName === \"onResizeStop\" ? null : size });\n\n      handler.call(_this3, i, w, h, { e: e, node: node, size: size });\n    };\n  };\n\n  GridItem.prototype.render = function render() {\n    var _props8 = this.props,\n        x = _props8.x,\n        y = _props8.y,\n        w = _props8.w,\n        h = _props8.h,\n        isDraggable = _props8.isDraggable,\n        isResizable = _props8.isResizable,\n        useCSSTransforms = _props8.useCSSTransforms;\n\n\n    var pos = this.calcPosition(x, y, w, h, this.state);\n    var child = _react2.default.Children.only(this.props.children);\n\n    // Create the child element. We clone the existing element but modify its className and style.\n    var newChild = _react2.default.cloneElement(child, {\n      className: (0, _classnames2.default)(\"react-grid-item\", child.props.className, this.props.className, {\n        static: this.props.static,\n        resizing: Boolean(this.state.resizing),\n        \"react-draggable\": isDraggable,\n        \"react-draggable-dragging\": Boolean(this.state.dragging),\n        cssTransforms: useCSSTransforms\n      }),\n      // We can set the width and height on the child, but unfortunately we can't set the position.\n      style: _extends({}, this.props.style, child.props.style, this.createStyle(pos))\n    });\n\n    // Resizable support. This is usually on but the user can toggle it off.\n    if (isResizable) newChild = this.mixinResizable(newChild, pos);\n\n    // Draggable support. This is always on, except for with placeholders.\n    if (isDraggable) newChild = this.mixinDraggable(newChild);\n\n    return newChild;\n  };\n\n  return GridItem;\n}(_react2.default.Component);\n\nGridItem.propTypes = {\n  // Children must be only a single element\n  children: _propTypes2.default.element,\n\n  // General grid attributes\n  cols: _propTypes2.default.number.isRequired,\n  containerWidth: _propTypes2.default.number.isRequired,\n  rowHeight: _propTypes2.default.number.isRequired,\n  margin: _propTypes2.default.array.isRequired,\n  maxRows: _propTypes2.default.number.isRequired,\n  containerPadding: _propTypes2.default.array.isRequired,\n\n  // These are all in grid units\n  x: _propTypes2.default.number.isRequired,\n  y: _propTypes2.default.number.isRequired,\n  w: _propTypes2.default.number.isRequired,\n  h: _propTypes2.default.number.isRequired,\n\n  // All optional\n  minW: function minW(props, propName) {\n    var value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"minWidth not Number\");\n    if (value > props.w || value > props.maxW) return new Error(\"minWidth larger than item width/maxWidth\");\n  },\n\n  maxW: function maxW(props, propName) {\n    var value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"maxWidth not Number\");\n    if (value < props.w || value < props.minW) return new Error(\"maxWidth smaller than item width/minWidth\");\n  },\n\n  minH: function minH(props, propName) {\n    var value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"minHeight not Number\");\n    if (value > props.h || value > props.maxH) return new Error(\"minHeight larger than item height/maxHeight\");\n  },\n\n  maxH: function maxH(props, propName) {\n    var value = props[propName];\n    if (typeof value !== \"number\") return new Error(\"maxHeight not Number\");\n    if (value < props.h || value < props.minH) return new Error(\"maxHeight smaller than item height/minHeight\");\n  },\n\n  // ID is nice to have for callbacks\n  i: _propTypes2.default.string.isRequired,\n\n  // Functions\n  onDragStop: _propTypes2.default.func,\n  onDragStart: _propTypes2.default.func,\n  onDrag: _propTypes2.default.func,\n  onResizeStop: _propTypes2.default.func,\n  onResizeStart: _propTypes2.default.func,\n  onResize: _propTypes2.default.func,\n\n  // Flags\n  isDraggable: _propTypes2.default.bool.isRequired,\n  isResizable: _propTypes2.default.bool.isRequired,\n  static: _propTypes2.default.bool,\n\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes2.default.bool.isRequired,\n\n  // Others\n  className: _propTypes2.default.string,\n  // Selector for draggable handle\n  handle: _propTypes2.default.string,\n  // Selector for draggable cancel (see react-draggable)\n  cancel: _propTypes2.default.string\n};\nGridItem.defaultProps = {\n  className: \"\",\n  cancel: \"\",\n  handle: \"\",\n  minH: 1,\n  minW: 1,\n  maxH: Infinity,\n  maxW: Infinity\n};\nexports[\"default\"] = GridItem;\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-grid-layout/build/GridItem.js?");

/***/ }),

/***/ "../../node_modules/react-grid-layout/build/ReactGridLayout.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/react-grid-layout/build/ReactGridLayout.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react?42c7\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(/*! prop-types */ \"../../node_modules/prop-types/index.js\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = __webpack_require__(/*! lodash.isequal */ \"../../node_modules/lodash.isequal/index.js\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _classnames = __webpack_require__(/*! classnames */ \"../../node_modules/classnames/index.js\");\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _utils = __webpack_require__(/*! ./utils */ \"../../node_modules/react-grid-layout/build/utils.js\");\n\nvar _GridItem = __webpack_require__(/*! ./GridItem */ \"../../node_modules/react-grid-layout/build/GridItem.js\");\n\nvar _GridItem2 = _interopRequireDefault(_GridItem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// End Types\n\n/**\n * A reactive, fluid grid layout with draggable, resizable components.\n */\n\n// Types\nvar ReactGridLayout = function (_React$Component) {\n  _inherits(ReactGridLayout, _React$Component);\n\n  // TODO publish internal ReactClass displayName transform\n  function ReactGridLayout(props, context) {\n    _classCallCheck(this, ReactGridLayout);\n\n    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n\n    _initialiseProps.call(_this);\n\n    (0, _utils.autoBindHandlers)(_this, [\"onDragStart\", \"onDrag\", \"onDragStop\", \"onResizeStart\", \"onResize\", \"onResizeStop\"]);\n    return _this;\n  }\n\n  ReactGridLayout.prototype.componentDidMount = function componentDidMount() {\n    this.setState({ mounted: true });\n    // Possibly call back with layout on mount. This should be done after correcting the layout width\n    // to ensure we don't rerender with the wrong width.\n    this.onLayoutMaybeChanged(this.state.layout, this.props.layout);\n  };\n\n  ReactGridLayout.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var newLayoutBase = void 0;\n    // Legacy support for compactType\n    // Allow parent to set layout directly.\n    if (!(0, _lodash2.default)(nextProps.layout, this.props.layout) || nextProps.compactType !== this.props.compactType) {\n      newLayoutBase = nextProps.layout;\n    } else if (!(0, _utils.childrenEqual)(this.props.children, nextProps.children)) {\n      // If children change, also regenerate the layout. Use our state\n      // as the base in case because it may be more up to date than\n      // what is in props.\n      newLayoutBase = this.state.layout;\n    }\n\n    // We need to regenerate the layout.\n    if (newLayoutBase) {\n      var newLayout = (0, _utils.synchronizeLayoutWithChildren)(newLayoutBase, nextProps.children, nextProps.cols, this.compactType(nextProps));\n      var _oldLayout = this.state.layout;\n      this.setState({ layout: newLayout });\n      this.onLayoutMaybeChanged(newLayout, _oldLayout);\n    }\n  };\n\n  /**\n   * Calculates a pixel value for the container.\n   * @return {String} Container height in pixels.\n   */\n\n\n  ReactGridLayout.prototype.containerHeight = function containerHeight() {\n    if (!this.props.autoSize) return;\n    var nbRow = (0, _utils.bottom)(this.state.layout);\n    var containerPaddingY = this.props.containerPadding ? this.props.containerPadding[1] : this.props.margin[1];\n    return nbRow * this.props.rowHeight + (nbRow - 1) * this.props.margin[1] + containerPaddingY * 2 + \"px\";\n  };\n\n  ReactGridLayout.prototype.compactType = function compactType(props) {\n    if (!props) props = this.props;\n    return props.verticalCompact === false ? null : props.compactType;\n  };\n\n  /**\n   * When dragging starts\n   * @param {String} i Id of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} node The current dragging DOM element\n   */\n\n\n  ReactGridLayout.prototype.onDragStart = function onDragStart(i, x, y, _ref) {\n    var e = _ref.e,\n        node = _ref.node;\n    var layout = this.state.layout;\n\n    var l = (0, _utils.getLayoutItem)(layout, i);\n    if (!l) return;\n\n    this.setState({\n      oldDragItem: (0, _utils.cloneLayoutItem)(l),\n      oldLayout: this.state.layout\n    });\n\n    return this.props.onDragStart(layout, l, l, null, e, node);\n  };\n\n  /**\n   * Each drag movement create a new dragelement and move the element to the dragged location\n   * @param {String} i Id of the child\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} node The current dragging DOM element\n   */\n\n\n  ReactGridLayout.prototype.onDrag = function onDrag(i, x, y, _ref2) {\n    var e = _ref2.e,\n        node = _ref2.node;\n    var oldDragItem = this.state.oldDragItem;\n    var layout = this.state.layout;\n    var cols = this.props.cols;\n\n    var l = (0, _utils.getLayoutItem)(layout, i);\n    if (!l) return;\n\n    // Create placeholder (display only)\n    var placeholder = {\n      w: l.w,\n      h: l.h,\n      x: l.x,\n      y: l.y,\n      placeholder: true,\n      i: i\n    };\n\n    // Move the element to the dragged location.\n    var isUserAction = true;\n    layout = (0, _utils.moveElement)(layout, l, x, y, isUserAction, this.props.preventCollision, this.compactType(), cols);\n\n    this.props.onDrag(layout, oldDragItem, l, placeholder, e, node);\n\n    this.setState({\n      layout: (0, _utils.compact)(layout, this.compactType(), cols),\n      activeDrag: placeholder\n    });\n  };\n\n  /**\n   * When dragging stops, figure out which position the element is closest to and update its x and y.\n   * @param  {String} i Index of the child.\n   * @param {Number} x X position of the move\n   * @param {Number} y Y position of the move\n   * @param {Event} e The mousedown event\n   * @param {Element} node The current dragging DOM element\n   */\n\n\n  ReactGridLayout.prototype.onDragStop = function onDragStop(i, x, y, _ref3) {\n    var e = _ref3.e,\n        node = _ref3.node;\n    var oldDragItem = this.state.oldDragItem;\n    var layout = this.state.layout;\n    var _props = this.props,\n        cols = _props.cols,\n        preventCollision = _props.preventCollision;\n\n    var l = (0, _utils.getLayoutItem)(layout, i);\n    if (!l) return;\n\n    // Move the element here\n    var isUserAction = true;\n    layout = (0, _utils.moveElement)(layout, l, x, y, isUserAction, preventCollision, this.compactType(), cols);\n\n    this.props.onDragStop(layout, oldDragItem, l, null, e, node);\n\n    // Set state\n    var newLayout = (0, _utils.compact)(layout, this.compactType(), cols);\n    var oldLayout = this.state.oldLayout;\n\n    this.setState({\n      activeDrag: null,\n      layout: newLayout,\n      oldDragItem: null,\n      oldLayout: null\n    });\n\n    this.onLayoutMaybeChanged(newLayout, oldLayout);\n  };\n\n  ReactGridLayout.prototype.onLayoutMaybeChanged = function onLayoutMaybeChanged(newLayout, oldLayout) {\n    if (!oldLayout) oldLayout = this.state.layout;\n    if (!(0, _lodash2.default)(oldLayout, newLayout)) {\n      this.props.onLayoutChange(newLayout);\n    }\n  };\n\n  ReactGridLayout.prototype.onResizeStart = function onResizeStart(i, w, h, _ref4) {\n    var e = _ref4.e,\n        node = _ref4.node;\n    var layout = this.state.layout;\n\n    var l = (0, _utils.getLayoutItem)(layout, i);\n    if (!l) return;\n\n    this.setState({\n      oldResizeItem: (0, _utils.cloneLayoutItem)(l),\n      oldLayout: this.state.layout\n    });\n\n    this.props.onResizeStart(layout, l, l, null, e, node);\n  };\n\n  ReactGridLayout.prototype.onResize = function onResize(i, w, h, _ref5) {\n    var e = _ref5.e,\n        node = _ref5.node;\n    var _state = this.state,\n        layout = _state.layout,\n        oldResizeItem = _state.oldResizeItem;\n    var _props2 = this.props,\n        cols = _props2.cols,\n        preventCollision = _props2.preventCollision;\n\n    var l = (0, _utils.getLayoutItem)(layout, i);\n    if (!l) return;\n\n    // Something like quad tree should be used\n    // to find collisions faster\n    var hasCollisions = void 0;\n    if (preventCollision) {\n      var collisions = (0, _utils.getAllCollisions)(layout, _extends({}, l, { w: w, h: h })).filter(function (layoutItem) {\n        return layoutItem.i !== l.i;\n      });\n      hasCollisions = collisions.length > 0;\n\n      // If we're colliding, we need adjust the placeholder.\n      if (hasCollisions) {\n        // adjust w && h to maximum allowed space\n        var leastX = Infinity,\n            leastY = Infinity;\n        collisions.forEach(function (layoutItem) {\n          if (layoutItem.x > l.x) leastX = Math.min(leastX, layoutItem.x);\n          if (layoutItem.y > l.y) leastY = Math.min(leastY, layoutItem.y);\n        });\n\n        if (Number.isFinite(leastX)) l.w = leastX - l.x;\n        if (Number.isFinite(leastY)) l.h = leastY - l.y;\n      }\n    }\n\n    if (!hasCollisions) {\n      // Set new width and height.\n      l.w = w;\n      l.h = h;\n    }\n\n    // Create placeholder element (display only)\n    var placeholder = {\n      w: l.w,\n      h: l.h,\n      x: l.x,\n      y: l.y,\n      static: true,\n      i: i\n    };\n\n    this.props.onResize(layout, oldResizeItem, l, placeholder, e, node);\n\n    // Re-compact the layout and set the drag placeholder.\n    this.setState({\n      layout: (0, _utils.compact)(layout, this.compactType(), cols),\n      activeDrag: placeholder\n    });\n  };\n\n  ReactGridLayout.prototype.onResizeStop = function onResizeStop(i, w, h, _ref6) {\n    var e = _ref6.e,\n        node = _ref6.node;\n    var _state2 = this.state,\n        layout = _state2.layout,\n        oldResizeItem = _state2.oldResizeItem;\n    var cols = this.props.cols;\n\n    var l = (0, _utils.getLayoutItem)(layout, i);\n\n    this.props.onResizeStop(layout, oldResizeItem, l, null, e, node);\n\n    // Set state\n    var newLayout = (0, _utils.compact)(layout, this.compactType(), cols);\n    var oldLayout = this.state.oldLayout;\n\n    this.setState({\n      activeDrag: null,\n      layout: newLayout,\n      oldResizeItem: null,\n      oldLayout: null\n    });\n\n    this.onLayoutMaybeChanged(newLayout, oldLayout);\n  };\n\n  /**\n   * Create a placeholder object.\n   * @return {Element} Placeholder div.\n   */\n\n\n  ReactGridLayout.prototype.placeholder = function placeholder() {\n    var activeDrag = this.state.activeDrag;\n\n    if (!activeDrag) return null;\n    var _props3 = this.props,\n        width = _props3.width,\n        cols = _props3.cols,\n        margin = _props3.margin,\n        containerPadding = _props3.containerPadding,\n        rowHeight = _props3.rowHeight,\n        maxRows = _props3.maxRows,\n        useCSSTransforms = _props3.useCSSTransforms;\n\n    // {...this.state.activeDrag} is pretty slow, actually\n\n    return _react2.default.createElement(\n      _GridItem2.default,\n      {\n        w: activeDrag.w,\n        h: activeDrag.h,\n        x: activeDrag.x,\n        y: activeDrag.y,\n        i: activeDrag.i,\n        className: \"react-grid-placeholder\",\n        containerWidth: width,\n        cols: cols,\n        margin: margin,\n        containerPadding: containerPadding || margin,\n        maxRows: maxRows,\n        rowHeight: rowHeight,\n        isDraggable: false,\n        isResizable: false,\n        useCSSTransforms: useCSSTransforms\n      },\n      _react2.default.createElement(\"div\", null)\n    );\n  };\n\n  /**\n   * Given a grid item, set its style attributes & surround in a <Draggable>.\n   * @param  {Element} child React element.\n   * @return {Element}       Element wrapped in draggable and properly placed.\n   */\n\n\n  ReactGridLayout.prototype.processGridItem = function processGridItem(child) {\n    if (!child || !child.key) return;\n    var l = (0, _utils.getLayoutItem)(this.state.layout, String(child.key));\n    if (!l) return null;\n    var _props4 = this.props,\n        width = _props4.width,\n        cols = _props4.cols,\n        margin = _props4.margin,\n        containerPadding = _props4.containerPadding,\n        rowHeight = _props4.rowHeight,\n        maxRows = _props4.maxRows,\n        isDraggable = _props4.isDraggable,\n        isResizable = _props4.isResizable,\n        useCSSTransforms = _props4.useCSSTransforms,\n        draggableCancel = _props4.draggableCancel,\n        draggableHandle = _props4.draggableHandle;\n    var mounted = this.state.mounted;\n\n    // Parse 'static'. Any properties defined directly on the grid item will take precedence.\n\n    var draggable = Boolean(!l.static && isDraggable && (l.isDraggable || l.isDraggable == null));\n    var resizable = Boolean(!l.static && isResizable && (l.isResizable || l.isResizable == null));\n\n    return _react2.default.createElement(\n      _GridItem2.default,\n      {\n        containerWidth: width,\n        cols: cols,\n        margin: margin,\n        containerPadding: containerPadding || margin,\n        maxRows: maxRows,\n        rowHeight: rowHeight,\n        cancel: draggableCancel,\n        handle: draggableHandle,\n        onDragStop: this.onDragStop,\n        onDragStart: this.onDragStart,\n        onDrag: this.onDrag,\n        onResizeStart: this.onResizeStart,\n        onResize: this.onResize,\n        onResizeStop: this.onResizeStop,\n        isDraggable: draggable,\n        isResizable: resizable,\n        useCSSTransforms: useCSSTransforms && mounted,\n        usePercentages: !mounted,\n        w: l.w,\n        h: l.h,\n        x: l.x,\n        y: l.y,\n        i: l.i,\n        minH: l.minH,\n        minW: l.minW,\n        maxH: l.maxH,\n        maxW: l.maxW,\n        \"static\": l.static\n      },\n      child\n    );\n  };\n\n  ReactGridLayout.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props5 = this.props,\n        className = _props5.className,\n        style = _props5.style;\n\n\n    var mergedClassName = (0, _classnames2.default)(\"react-grid-layout\", className);\n    var mergedStyle = _extends({\n      height: this.containerHeight()\n    }, style);\n\n    return _react2.default.createElement(\n      \"div\",\n      { className: mergedClassName, style: mergedStyle },\n      _react2.default.Children.map(this.props.children, function (child) {\n        return _this2.processGridItem(child);\n      }),\n      this.placeholder()\n    );\n  };\n\n  return ReactGridLayout;\n}(_react2.default.Component);\n\nReactGridLayout.displayName = \"ReactGridLayout\";\nReactGridLayout.propTypes = {\n  //\n  // Basic props\n  //\n  className: _propTypes2.default.string,\n  style: _propTypes2.default.object,\n\n  // This can be set explicitly. If it is not set, it will automatically\n  // be set to the container width. Note that resizes will *not* cause this to adjust.\n  // If you need that behavior, use WidthProvider.\n  width: _propTypes2.default.number,\n\n  // If true, the container height swells and contracts to fit contents\n  autoSize: _propTypes2.default.bool,\n  // # of cols.\n  cols: _propTypes2.default.number,\n\n  // A selector that will not be draggable.\n  draggableCancel: _propTypes2.default.string,\n  // A selector for the draggable handler\n  draggableHandle: _propTypes2.default.string,\n\n  // Deprecated\n  verticalCompact: function verticalCompact(props) {\n    if (props.verticalCompact === false && \"development\" !== \"production\") {\n      console.warn(\n      // eslint-disable-line no-console\n      \"`verticalCompact` on <ReactGridLayout> is deprecated and will be removed soon. \" + 'Use `compactType`: \"horizontal\" | \"vertical\" | null.');\n    }\n  },\n  // Choose vertical or hotizontal compaction\n  compactType: _propTypes2.default.oneOf([\"vertical\", \"horizontal\"]),\n\n  // layout is an array of object with the format:\n  // {x: Number, y: Number, w: Number, h: Number, i: String}\n  layout: function layout(props) {\n    var layout = props.layout;\n    // I hope you're setting the data-grid property on the grid items\n    if (layout === undefined) return;\n    (0, _utils.validateLayout)(layout, \"layout\");\n  },\n\n  //\n  // Grid Dimensions\n  //\n\n  // Margin between items [x, y] in px\n  margin: _propTypes2.default.arrayOf(_propTypes2.default.number),\n  // Padding inside the container [x, y] in px\n  containerPadding: _propTypes2.default.arrayOf(_propTypes2.default.number),\n  // Rows have a static height, but you can change this based on breakpoints if you like\n  rowHeight: _propTypes2.default.number,\n  // Default Infinity, but you can specify a max here if you like.\n  // Note that this isn't fully fleshed out and won't error if you specify a layout that\n  // extends beyond the row capacity. It will, however, not allow users to drag/resize\n  // an item past the barrier. They can push items beyond the barrier, though.\n  // Intentionally not documented for this reason.\n  maxRows: _propTypes2.default.number,\n\n  //\n  // Flags\n  //\n  isDraggable: _propTypes2.default.bool,\n  isResizable: _propTypes2.default.bool,\n  // If true, grid items won't change position when being dragged over.\n  preventCollision: _propTypes2.default.bool,\n  // Use CSS transforms instead of top/left\n  useCSSTransforms: _propTypes2.default.bool,\n\n  //\n  // Callbacks\n  //\n\n  // Callback so you can save the layout. Calls after each drag & resize stops.\n  onLayoutChange: _propTypes2.default.func,\n\n  // Calls when drag starts. Callback is of the signature (layout, oldItem, newItem, placeholder, e, ?node).\n  // All callbacks below have the same signature. 'start' and 'stop' callbacks omit the 'placeholder'.\n  onDragStart: _propTypes2.default.func,\n  // Calls on each drag movement.\n  onDrag: _propTypes2.default.func,\n  // Calls when drag is complete.\n  onDragStop: _propTypes2.default.func,\n  //Calls when resize starts.\n  onResizeStart: _propTypes2.default.func,\n  // Calls when resize movement happens.\n  onResize: _propTypes2.default.func,\n  // Calls when resize is complete.\n  onResizeStop: _propTypes2.default.func,\n\n  //\n  // Other validations\n  //\n\n  // Children must not have duplicate keys.\n  children: function children(props, propName) {\n    var children = props[propName];\n\n    // Check children keys for duplicates. Throw if found.\n    var keys = {};\n    _react2.default.Children.forEach(children, function (child) {\n      if (keys[child.key]) {\n        throw new Error('Duplicate child key \"' + child.key + '\" found! This will cause problems in ReactGridLayout.');\n      }\n      keys[child.key] = true;\n    });\n  }\n};\nReactGridLayout.defaultProps = {\n  autoSize: true,\n  cols: 12,\n  className: \"\",\n  style: {},\n  draggableHandle: \"\",\n  draggableCancel: \"\",\n  containerPadding: null,\n  rowHeight: 150,\n  maxRows: Infinity, // infinite vertical growth\n  layout: [],\n  margin: [10, 10],\n  isDraggable: true,\n  isResizable: true,\n  useCSSTransforms: true,\n  verticalCompact: true,\n  compactType: \"vertical\",\n  preventCollision: false,\n  onLayoutChange: _utils.noop,\n  onDragStart: _utils.noop,\n  onDrag: _utils.noop,\n  onDragStop: _utils.noop,\n  onResizeStart: _utils.noop,\n  onResize: _utils.noop,\n  onResizeStop: _utils.noop\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  this.state = {\n    activeDrag: null,\n    layout: (0, _utils.synchronizeLayoutWithChildren)(this.props.layout, this.props.children, this.props.cols,\n    // Legacy support for verticalCompact: false\n    this.compactType()),\n    mounted: false,\n    oldDragItem: null,\n    oldLayout: null,\n    oldResizeItem: null\n  };\n};\n\nexports[\"default\"] = ReactGridLayout;\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-grid-layout/build/ReactGridLayout.js?");

/***/ }),

/***/ "../../node_modules/react-grid-layout/build/ResponsiveReactGridLayout.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/react-grid-layout/build/ResponsiveReactGridLayout.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react?42c7\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(/*! prop-types */ \"../../node_modules/prop-types/index.js\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _lodash = __webpack_require__(/*! lodash.isequal */ \"../../node_modules/lodash.isequal/index.js\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utils = __webpack_require__(/*! ./utils */ \"../../node_modules/react-grid-layout/build/utils.js\");\n\nvar _responsiveUtils = __webpack_require__(/*! ./responsiveUtils */ \"../../node_modules/react-grid-layout/build/responsiveUtils.js\");\n\nvar _ReactGridLayout = __webpack_require__(/*! ./ReactGridLayout */ \"../../node_modules/react-grid-layout/build/ReactGridLayout.js\");\n\nvar _ReactGridLayout2 = _interopRequireDefault(_ReactGridLayout);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar type = function type(obj) {\n  return Object.prototype.toString.call(obj);\n};\n\nvar ResponsiveReactGridLayout = function (_React$Component) {\n  _inherits(ResponsiveReactGridLayout, _React$Component);\n\n  function ResponsiveReactGridLayout() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ResponsiveReactGridLayout);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = _this.generateInitialState(), _this.onLayoutChange = function (layout) {\n      var _extends2;\n\n      _this.props.onLayoutChange(layout, _extends({}, _this.props.layouts, (_extends2 = {}, _extends2[_this.state.breakpoint] = layout, _extends2)));\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  // This should only include propTypes needed in this code; RGL itself\n  // will do validation of the rest props passed to it.\n\n\n  ResponsiveReactGridLayout.prototype.generateInitialState = function generateInitialState() {\n    var _props = this.props,\n        width = _props.width,\n        breakpoints = _props.breakpoints,\n        layouts = _props.layouts,\n        cols = _props.cols;\n\n    var breakpoint = (0, _responsiveUtils.getBreakpointFromWidth)(breakpoints, width);\n    var colNo = (0, _responsiveUtils.getColsFromBreakpoint)(breakpoint, cols);\n    // verticalCompact compatibility, now deprecated\n    var compactType = this.props.verticalCompact === false ? null : this.props.compactType;\n    // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n    // for this layout.\n    var initialLayout = (0, _responsiveUtils.findOrGenerateResponsiveLayout)(layouts, breakpoints, breakpoint, breakpoint, colNo, compactType);\n\n    return {\n      layout: initialLayout,\n      breakpoint: breakpoint,\n      cols: colNo\n    };\n  };\n\n  ResponsiveReactGridLayout.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    // Allow parent to set width or breakpoint directly.\n    if (nextProps.width != this.props.width || nextProps.breakpoint !== this.props.breakpoint || !(0, _lodash2.default)(nextProps.breakpoints, this.props.breakpoints) || !(0, _lodash2.default)(nextProps.cols, this.props.cols)) {\n      this.onWidthChange(nextProps);\n    } else if (!(0, _lodash2.default)(nextProps.layouts, this.props.layouts)) {\n      // Allow parent to set layouts directly.\n      var _state = this.state,\n          _breakpoint = _state.breakpoint,\n          _cols = _state.cols;\n\n      // Since we're setting an entirely new layout object, we must generate a new responsive layout\n      // if one does not exist.\n\n      var newLayout = (0, _responsiveUtils.findOrGenerateResponsiveLayout)(nextProps.layouts, nextProps.breakpoints, _breakpoint, _breakpoint, _cols, nextProps.compactType);\n      this.setState({ layout: newLayout });\n    }\n  };\n\n  // wrap layouts so we do not need to pass layouts to child\n\n\n  /**\n   * When the width changes work through breakpoints and reset state with the new width & breakpoint.\n   * Width changes are necessary to figure out the widget widths.\n   */\n  ResponsiveReactGridLayout.prototype.onWidthChange = function onWidthChange(nextProps) {\n    var breakpoints = nextProps.breakpoints,\n        cols = nextProps.cols,\n        layouts = nextProps.layouts,\n        compactType = nextProps.compactType;\n\n    var newBreakpoint = nextProps.breakpoint || (0, _responsiveUtils.getBreakpointFromWidth)(nextProps.breakpoints, nextProps.width);\n\n    var lastBreakpoint = this.state.breakpoint;\n\n    // Breakpoint change\n    if (lastBreakpoint !== newBreakpoint || this.props.breakpoints !== breakpoints || this.props.cols !== cols) {\n      // Preserve the current layout if the current breakpoint is not present in the next layouts.\n      if (!(lastBreakpoint in layouts)) layouts[lastBreakpoint] = (0, _utils.cloneLayout)(this.state.layout);\n\n      // Find or generate a new layout.\n      var newCols = (0, _responsiveUtils.getColsFromBreakpoint)(newBreakpoint, cols);\n      var _layout = (0, _responsiveUtils.findOrGenerateResponsiveLayout)(layouts, breakpoints, newBreakpoint, lastBreakpoint, newCols, compactType);\n\n      // This adds missing items.\n      _layout = (0, _utils.synchronizeLayoutWithChildren)(_layout, nextProps.children, newCols, compactType);\n\n      // Store the new layout.\n      layouts[newBreakpoint] = _layout;\n\n      // callbacks\n      this.props.onLayoutChange(_layout, layouts);\n      this.props.onBreakpointChange(newBreakpoint, newCols);\n      this.props.onWidthChange(nextProps.width, nextProps.margin, newCols, nextProps.containerPadding);\n\n      this.setState({\n        breakpoint: newBreakpoint,\n        layout: _layout,\n        cols: newCols\n      });\n    }\n  };\n\n  ResponsiveReactGridLayout.prototype.render = function render() {\n    /* eslint-disable no-unused-vars */\n    var _props2 = this.props,\n        breakpoint = _props2.breakpoint,\n        breakpoints = _props2.breakpoints,\n        cols = _props2.cols,\n        layouts = _props2.layouts,\n        onBreakpointChange = _props2.onBreakpointChange,\n        onLayoutChange = _props2.onLayoutChange,\n        onWidthChange = _props2.onWidthChange,\n        other = _objectWithoutProperties(_props2, [\"breakpoint\", \"breakpoints\", \"cols\", \"layouts\", \"onBreakpointChange\", \"onLayoutChange\", \"onWidthChange\"]);\n    /* eslint-enable no-unused-vars */\n\n    return _react2.default.createElement(_ReactGridLayout2.default, _extends({}, other, {\n      onLayoutChange: this.onLayoutChange,\n      layout: this.state.layout,\n      cols: this.state.cols\n    }));\n  };\n\n  return ResponsiveReactGridLayout;\n}(_react2.default.Component);\n\nResponsiveReactGridLayout.propTypes = {\n  //\n  // Basic props\n  //\n\n  // Optional, but if you are managing width yourself you may want to set the breakpoint\n  // yourself as well.\n  breakpoint: _propTypes2.default.string,\n\n  // {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}\n  breakpoints: _propTypes2.default.object,\n\n  // # of cols. This is a breakpoint -> cols map\n  cols: _propTypes2.default.object,\n\n  // layouts is an object mapping breakpoints to layouts.\n  // e.g. {lg: Layout, md: Layout, ...}\n  layouts: function layouts(props, propName) {\n    if (type(props[propName]) !== \"[object Object]\") {\n      throw new Error(\"Layout property must be an object. Received: \" + type(props[propName]));\n    }\n    Object.keys(props[propName]).forEach(function (key) {\n      if (!(key in props.breakpoints)) {\n        throw new Error(\"Each key in layouts must align with a key in breakpoints.\");\n      }\n      (0, _utils.validateLayout)(props.layouts[key], \"layouts.\" + key);\n    });\n  },\n\n\n  // The width of this component.\n  // Required in this propTypes stanza because generateInitialState() will fail without it.\n  width: _propTypes2.default.number.isRequired,\n\n  //\n  // Callbacks\n  //\n\n  // Calls back with breakpoint and new # cols\n  onBreakpointChange: _propTypes2.default.func,\n\n  // Callback so you can save the layout.\n  // Calls back with (currentLayout, allLayouts). allLayouts are keyed by breakpoint.\n  onLayoutChange: _propTypes2.default.func,\n\n  // Calls back with (containerWidth, margin, cols, containerPadding)\n  onWidthChange: _propTypes2.default.func\n};\nResponsiveReactGridLayout.defaultProps = {\n  breakpoints: { lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 },\n  cols: { lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 },\n  layouts: {},\n  onBreakpointChange: _utils.noop,\n  onLayoutChange: _utils.noop,\n  onWidthChange: _utils.noop\n};\nexports[\"default\"] = ResponsiveReactGridLayout;\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-grid-layout/build/ResponsiveReactGridLayout.js?");

/***/ }),

/***/ "../../node_modules/react-grid-layout/build/components/WidthProvider.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/react-grid-layout/build/components/WidthProvider.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key] } } } return target };\n\nexports[\"default\"] = WidthProvider\n\nvar _react = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react?42c7\")\n\nvar _react2 = _interopRequireDefault(_react)\n\nvar _propTypes = __webpack_require__(/*! prop-types */ \"../../node_modules/prop-types/index.js\")\n\nvar _propTypes2 = _interopRequireDefault(_propTypes)\n\nvar _reactDom = __webpack_require__(/*! react-dom */ \"webpack/sharing/consume/default/react-dom/react-dom?fe4c\")\n\nvar _reactDom2 = _interopRequireDefault(_reactDom)\n\n//引入第三方库监听dom元素尺寸变化\nvar _resizeObserverPolyfill = __webpack_require__(/*! resize-observer-polyfill */ \"../../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\")\nvar _resizeObserverPolyfill2 = _interopRequireDefault(_resizeObserverPolyfill)\n\nfunction _interopRequireDefault (obj) { return obj && obj.__esModule ? obj : { default: obj } }\n\nfunction _objectWithoutProperties (obj, keys) {\n  var target = {}\n    for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue\n        if (!Object.prototype.hasOwnProperty.call(obj, i)) continue\n        target[i] = obj[i]\n    }\n  return target\n}\n\nfunction _classCallCheck (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function') } }\n\nfunction _possibleConstructorReturn (self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\") } return call && (typeof call === 'object' || typeof call === 'function') ? call : self }\n\nfunction _inherits (subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass) } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass }\n\n/*\n * A simple HOC that provides facility for listening to container resizes.\n */\nfunction WidthProvider (ComposedComponent) {\n  var _class, _temp2\n    var _resizeObj\n\n    return _temp2 = _class = (function(_React$Component) {\n        _inherits(WidthProvider, _React$Component);\n\n        function WidthProvider() {\n            var _temp, _this, _ret;\n\n            _classCallCheck(this, WidthProvider);\n\n            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n            }\n\n            return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n                width: 1280\n            }, _this.mounted = false, _this.onWindowResize = function() {\n                if (!_this.mounted) return;\n                // eslint-disable-next-line\n                var node = _reactDom2.default.findDOMNode(_this); // Flow casts this to Text | Element\n                if (node instanceof HTMLElement) _this.setState({ width: node.offsetWidth });\n            }, _this.resizeListener = function(rect) {\n                if (!_this.mounted || rect.hide) return;\n                _this.setState({ width: rect.width });\n            }, _temp), _possibleConstructorReturn(_this, _ret);\n        }\n\n        WidthProvider.prototype.componentDidMount = function componentDidMount() {\n            this.mounted = true;\n\n            var _resizeEle = _reactDom2.default.findDOMNode(this); // Flow casts this to Text | Element\n            if (_resizeEle instanceof HTMLElement) {\n                _resizeObj = addResizeObserve(_resizeEle, this.resizeListener)\n            } else {\n                window.addEventListener(\"resize\", this.onWindowResize);\n            }\n\n            // window.addEventListener(\"resize\", this.onWindowResize);\n            // Call to properly set the breakpoint and resize the elements.\n            // Note that if you're doing a full-width element, this can get a little wonky if a scrollbar\n            // appears because of the grid. In that case, fire your own resize event, or set `overflow: scroll` on your body.\n            this.onWindowResize();\n            console.warn(\"===reactGridLayout: onResize...\");\n        };\n\n        WidthProvider.prototype.componentWillUnmount = function componentWillUnmount() {\n            this.mounted = false;\n            if (_resizeObj) {\n                _resizeObj.removeResizeObserve();\n                _resizeObj = null;\n            } else {\n                window.removeEventListener(\"resize\", this.onWindowResize);\n            }\n            // window.removeEventListener(\"resize\", this.onWindowResize);\n            console.warn(\"===reactGridLayout: remove onResize...\");\n        };\n\n        WidthProvider.prototype.render = function render() {\n            var _props = this.props,\n                measureBeforeMount = _props.measureBeforeMount,\n                rest = _objectWithoutProperties(_props, [\"measureBeforeMount\"]);\n\n            if (measureBeforeMount && !this.mounted) {\n                return _react2.default.createElement(\"div\", { className: this.props.className, style: this.props.style });\n            }\n\n            return _react2.default.createElement(ComposedComponent, _extends({}, rest, this.state));\n        };\n\n        return WidthProvider;\n    }(_react2.default.Component)), _class.defaultProps = {\n    measureBeforeMount: false\n  }, _class.propTypes = {\n    // If true, will not render children until mounted. Useful for getting the exact width before\n    // rendering, to prevent any unsightly resizing.\n    measureBeforeMount: _propTypes2.default.bool\n  }, _temp2\n}\n\n// 监听dom元素尺寸变化 --20190525 wenqiao\nfunction addResizeObserve (element, callback) {\n  var handleResize = function handleResize (entries) {\n    var entry = entries[0]\n        var hide = entry.contentRect.width === 0 && entry.contentRect.height === 0\n        var _entry$contentRect = entry.contentRect;\n\n\nvar width = _entry$contentRect.width;\n\n\nvar height = _entry$contentRect.height\n\n        var rect = {\n      hide: hide,\n      width: width,\n      height: height\n      // console.log('entry.target', entry.target);\n      // console.log('size', entry.contentRect)\n    }\n        callback && callback(rect)\n    };\n  var watcher = new _resizeObserverPolyfill2.default(handleResize)\n    watcher.observe(element)\n    return {\n    removeResizeObserve: function removeResizeObserve () {\n      watcher.disconnect(element)\n            watcher = null\n        }\n  }\n}\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-grid-layout/build/components/WidthProvider.js?");

/***/ }),

/***/ "../../node_modules/react-grid-layout/build/responsiveUtils.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/react-grid-layout/build/responsiveUtils.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.getBreakpointFromWidth = getBreakpointFromWidth;\nexports.getColsFromBreakpoint = getColsFromBreakpoint;\nexports.findOrGenerateResponsiveLayout = findOrGenerateResponsiveLayout;\nexports.sortBreakpoints = sortBreakpoints;\n\nvar _utils = __webpack_require__(/*! ./utils */ \"../../node_modules/react-grid-layout/build/utils.js\");\n\n/**\n * Given a width, find the highest breakpoint that matches is valid for it (width > breakpoint).\n *\n * @param  {Object} breakpoints Breakpoints object (e.g. {lg: 1200, md: 960, ...})\n * @param  {Number} width Screen width.\n * @return {String}       Highest breakpoint that is less than width.\n */\nfunction getBreakpointFromWidth(breakpoints, width) {\n  var sorted = sortBreakpoints(breakpoints);\n  var matching = sorted[0];\n  for (var i = 1, len = sorted.length; i < len; i++) {\n    var breakpointName = sorted[i];\n    if (width > breakpoints[breakpointName]) matching = breakpointName;\n  }\n  return matching;\n}\n\n/**\n * Given a breakpoint, get the # of cols set for it.\n * @param  {String} breakpoint Breakpoint name.\n * @param  {Object} cols       Map of breakpoints to cols.\n * @return {Number}            Number of cols.\n */\n\n\nfunction getColsFromBreakpoint(breakpoint, cols) {\n  if (!cols[breakpoint]) {\n    throw new Error(\"ResponsiveReactGridLayout: `cols` entry for breakpoint \" + breakpoint + \" is missing!\");\n  }\n  return cols[breakpoint];\n}\n\n/**\n * Given existing layouts and a new breakpoint, find or generate a new layout.\n *\n * This finds the layout above the new one and generates from it, if it exists.\n *\n * @param  {Object} layouts     Existing layouts.\n * @param  {Array} breakpoints All breakpoints.\n * @param  {String} breakpoint New breakpoint.\n * @param  {String} breakpoint Last breakpoint (for fallback).\n * @param  {Number} cols       Column count at new breakpoint.\n * @param  {Boolean} verticalCompact Whether or not to compact the layout\n *   vertically.\n * @return {Array}             New layout.\n */\nfunction findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, lastBreakpoint, cols, compactType) {\n  // If it already exists, just return it.\n  if (layouts[breakpoint]) return (0, _utils.cloneLayout)(layouts[breakpoint]);\n  // Find or generate the next layout\n  var layout = layouts[lastBreakpoint];\n  var breakpointsSorted = sortBreakpoints(breakpoints);\n  var breakpointsAbove = breakpointsSorted.slice(breakpointsSorted.indexOf(breakpoint));\n  for (var i = 0, len = breakpointsAbove.length; i < len; i++) {\n    var b = breakpointsAbove[i];\n    if (layouts[b]) {\n      layout = layouts[b];\n      break;\n    }\n  }\n  layout = (0, _utils.cloneLayout)(layout || []); // clone layout so we don't modify existing items\n  return (0, _utils.compact)((0, _utils.correctBounds)(layout, { cols: cols }), compactType, cols);\n}\n\n/**\n * Given breakpoints, return an array of breakpoints sorted by width. This is usually\n * e.g. ['xxs', 'xs', 'sm', ...]\n *\n * @param  {Object} breakpoints Key/value pair of breakpoint names to widths.\n * @return {Array}              Sorted breakpoints.\n */\nfunction sortBreakpoints(breakpoints) {\n  var keys = Object.keys(breakpoints);\n  return keys.sort(function (a, b) {\n    return breakpoints[a] - breakpoints[b];\n  });\n}\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-grid-layout/build/responsiveUtils.js?");

/***/ }),

/***/ "../../node_modules/react-grid-layout/build/utils.js":
/*!***********************************************************!*\
  !*** ../../node_modules/react-grid-layout/build/utils.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.noop = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.bottom = bottom;\nexports.cloneLayout = cloneLayout;\nexports.cloneLayoutItem = cloneLayoutItem;\nexports.childrenEqual = childrenEqual;\nexports.collides = collides;\nexports.compact = compact;\nexports.compactItem = compactItem;\nexports.correctBounds = correctBounds;\nexports.getLayoutItem = getLayoutItem;\nexports.getFirstCollision = getFirstCollision;\nexports.getAllCollisions = getAllCollisions;\nexports.getStatics = getStatics;\nexports.moveElement = moveElement;\nexports.moveElementAwayFromCollision = moveElementAwayFromCollision;\nexports.perc = perc;\nexports.setTransform = setTransform;\nexports.setTopLeft = setTopLeft;\nexports.sortLayoutItems = sortLayoutItems;\nexports.sortLayoutItemsByRowCol = sortLayoutItemsByRowCol;\nexports.sortLayoutItemsByColRow = sortLayoutItemsByColRow;\nexports.synchronizeLayoutWithChildren = synchronizeLayoutWithChildren;\nexports.validateLayout = validateLayout;\nexports.autoBindHandlers = autoBindHandlers;\n\nvar _lodash = __webpack_require__(/*! lodash.isequal */ \"../../node_modules/lodash.isequal/index.js\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _react = __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react?42c7\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// All callbacks are of the signature (layout, oldItem, newItem, placeholder, e).\nvar isProduction = \"development\" === \"production\";\nvar DEBUG = false;\n\n/**\n * Return the bottom coordinate of the layout.\n *\n * @param  {Array} layout Layout array.\n * @return {Number}       Bottom coordinate.\n */\nfunction bottom(layout) {\n  var max = 0,\n      bottomY = void 0;\n  for (var _i = 0, len = layout.length; _i < len; _i++) {\n    bottomY = layout[_i].y + layout[_i].h;\n    if (bottomY > max) max = bottomY;\n  }\n  return max;\n}\n\nfunction cloneLayout(layout) {\n  var newLayout = Array(layout.length);\n  for (var _i2 = 0, len = layout.length; _i2 < len; _i2++) {\n    newLayout[_i2] = cloneLayoutItem(layout[_i2]);\n  }\n  return newLayout;\n}\n\n// Fast path to cloning, since this is monomorphic\nfunction cloneLayoutItem(layoutItem) {\n  return {\n    w: layoutItem.w,\n    h: layoutItem.h,\n    x: layoutItem.x,\n    y: layoutItem.y,\n    i: layoutItem.i,\n    minW: layoutItem.minW,\n    maxW: layoutItem.maxW,\n    minH: layoutItem.minH,\n    maxH: layoutItem.maxH,\n    moved: Boolean(layoutItem.moved),\n    static: Boolean(layoutItem.static),\n    // These can be null\n    isDraggable: layoutItem.isDraggable,\n    isResizable: layoutItem.isResizable\n  };\n}\n\n/**\n * Comparing React `children` is a bit difficult. This is a good way to compare them.\n * This will catch differences in keys, order, and length.\n */\nfunction childrenEqual(a, b) {\n  return (0, _lodash2.default)(_react2.default.Children.map(a, function (c) {\n    return c.key;\n  }), _react2.default.Children.map(b, function (c) {\n    return c.key;\n  }));\n}\n\n/**\n * Given two layoutitems, check if they collide.\n */\nfunction collides(l1, l2) {\n  if (l1 === l2) return false; // same element\n  if (l1.x + l1.w <= l2.x) return false; // l1 is left of l2\n  if (l1.x >= l2.x + l2.w) return false; // l1 is right of l2\n  if (l1.y + l1.h <= l2.y) return false; // l1 is above l2\n  if (l1.y >= l2.y + l2.h) return false; // l1 is below l2\n  return true; // boxes overlap\n}\n\n/**\n * Given a layout, compact it. This involves going down each y coordinate and removing gaps\n * between items.\n *\n * @param  {Array} layout Layout.\n * @param  {Boolean} verticalCompact Whether or not to compact the layout\n *   vertically.\n * @return {Array}       Compacted Layout.\n */\nfunction compact(layout, compactType, cols) {\n  // Statics go in the compareWith array right away so items flow around them.\n  var compareWith = getStatics(layout);\n  // We go through the items by row and column.\n  var sorted = sortLayoutItems(layout, compactType);\n  // Holding for new items.\n  var out = Array(layout.length);\n\n  for (var _i3 = 0, len = sorted.length; _i3 < len; _i3++) {\n    var l = cloneLayoutItem(sorted[_i3]);\n\n    // Don't move static elements\n    if (!l.static) {\n      l = compactItem(compareWith, l, compactType, cols, sorted);\n\n      // Add to comparison array. We only collide with items before this one.\n      // Statics are already in this array.\n      compareWith.push(l);\n    }\n\n    // Add to output array to make sure they still come out in the right order.\n    out[layout.indexOf(sorted[_i3])] = l;\n\n    // Clear moved flag, if it exists.\n    l.moved = false;\n  }\n\n  return out;\n}\n\nvar heightWidth = { x: \"w\", y: \"h\" };\n/**\n * Before moving item down, it will check if the movement will cause collisions and move those items down before.\n */\nfunction resolveCompactionCollision(layout, item, moveToCoord, axis) {\n  var sizeProp = heightWidth[axis];\n  item[axis] += 1;\n  var itemIndex = layout.indexOf(item);\n\n  // Go through each item we collide with.\n  for (var _i4 = itemIndex + 1; _i4 < layout.length; _i4++) {\n    var otherItem = layout[_i4];\n    // Ignore static items\n    if (otherItem.static) continue;\n\n    // Optimization: we can break early if we know we're past this el\n    // We can do this b/c it's a sorted layout\n    if (otherItem.y > item.y + item.h) break;\n\n    if (collides(item, otherItem)) {\n      resolveCompactionCollision(layout, otherItem, moveToCoord + item[sizeProp], axis);\n    }\n  }\n\n  item[axis] = moveToCoord;\n}\n\n/**\n * Compact an item in the layout.\n */\nfunction compactItem(compareWith, l, compactType, cols, fullLayout) {\n  var compactV = compactType === \"vertical\";\n  var compactH = compactType === \"horizontal\";\n  if (compactV) {\n    // Bottom 'y' possible is the bottom of the layout.\n    // This allows you to do nice stuff like specify {y: Infinity}\n    // This is here because the layout must be sorted in order to get the correct bottom `y`.\n    l.y = Math.min(bottom(compareWith), l.y);\n    // Move the element up as far as it can go without colliding.\n    while (l.y > 0 && !getFirstCollision(compareWith, l)) {\n      l.y--;\n    }\n  } else if (compactH) {\n    l.y = Math.min(bottom(compareWith), l.y);\n    // Move the element left as far as it can go without colliding.\n    while (l.x > 0 && !getFirstCollision(compareWith, l)) {\n      l.x--;\n    }\n  }\n\n  // Move it down, and keep moving it down if it's colliding.\n  var collides = void 0;\n  while (collides = getFirstCollision(compareWith, l)) {\n    if (compactH) {\n      resolveCompactionCollision(fullLayout, l, collides.x + collides.w, \"x\");\n    } else {\n      resolveCompactionCollision(fullLayout, l, collides.y + collides.h, \"y\");\n    }\n    // Since we can't grow without bounds horizontally, if we've overflown, let's move it down and try again.\n    if (compactH && l.x + l.w > cols) {\n      l.x = cols - l.w;\n      l.y++;\n    }\n  }\n  return l;\n}\n\n/**\n * Given a layout, make sure all elements fit within its bounds.\n *\n * @param  {Array} layout Layout array.\n * @param  {Number} bounds Number of columns.\n */\nfunction correctBounds(layout, bounds) {\n  var collidesWith = getStatics(layout);\n  for (var _i5 = 0, len = layout.length; _i5 < len; _i5++) {\n    var l = layout[_i5];\n    // Overflows right\n    if (l.x + l.w > bounds.cols) l.x = bounds.cols - l.w;\n    // Overflows left\n    if (l.x < 0) {\n      l.x = 0;\n      l.w = bounds.cols;\n    }\n    if (!l.static) collidesWith.push(l);else {\n      // If this is static and collides with other statics, we must move it down.\n      // We have to do something nicer than just letting them overlap.\n      while (getFirstCollision(collidesWith, l)) {\n        l.y++;\n      }\n    }\n  }\n  return layout;\n}\n\n/**\n * Get a layout item by ID. Used so we can override later on if necessary.\n *\n * @param  {Array}  layout Layout array.\n * @param  {String} id     ID\n * @return {LayoutItem}    Item at ID.\n */\nfunction getLayoutItem(layout, id) {\n  for (var _i6 = 0, len = layout.length; _i6 < len; _i6++) {\n    if (layout[_i6].i === id) return layout[_i6];\n  }\n}\n\n/**\n * Returns the first item this layout collides with.\n * It doesn't appear to matter which order we approach this from, although\n * perhaps that is the wrong thing to do.\n *\n * @param  {Object} layoutItem Layout item.\n * @return {Object|undefined}  A colliding layout item, or undefined.\n */\nfunction getFirstCollision(layout, layoutItem) {\n  for (var _i7 = 0, len = layout.length; _i7 < len; _i7++) {\n    if (collides(layout[_i7], layoutItem)) return layout[_i7];\n  }\n}\n\nfunction getAllCollisions(layout, layoutItem) {\n  return layout.filter(function (l) {\n    return collides(l, layoutItem);\n  });\n}\n\n/**\n * Get all static elements.\n * @param  {Array} layout Array of layout objects.\n * @return {Array}        Array of static layout items..\n */\nfunction getStatics(layout) {\n  return layout.filter(function (l) {\n    return l.static;\n  });\n}\n\n/**\n * Move an element. Responsible for doing cascading movements of other elements.\n *\n * @param  {Array}      layout            Full layout to modify.\n * @param  {LayoutItem} l                 element to move.\n * @param  {Number}     [x]               X position in grid units.\n * @param  {Number}     [y]               Y position in grid units.\n */\nfunction moveElement(layout, l, x, y, isUserAction, preventCollision, compactType, cols) {\n  if (l.static) return layout;\n\n  // Short-circuit if nothing to do.\n  if (l.y === y && l.x === x) return layout;\n\n  log(\"Moving element \" + l.i + \" to [\" + String(x) + \",\" + String(y) + \"] from [\" + l.x + \",\" + l.y + \"]\");\n  var oldX = l.x;\n  var oldY = l.y;\n\n  // This is quite a bit faster than extending the object\n  if (typeof x === 'number') l.x = x;\n  if (typeof y === 'number') l.y = y;\n  l.moved = true;\n\n  // If this collides with anything, move it.\n  // When doing this comparison, we have to sort the items we compare with\n  // to ensure, in the case of multiple collisions, that we're getting the\n  // nearest collision.\n  var sorted = sortLayoutItems(layout, compactType);\n  var movingUp = compactType === \"vertical\" && typeof y === 'number' ? oldY >= y : compactType === \"horizontal\" && typeof x === 'number' ? oldX >= x : false;\n  if (movingUp) sorted = sorted.reverse();\n  var collisions = getAllCollisions(sorted, l);\n\n  // There was a collision; abort\n  if (preventCollision && collisions.length) {\n    log(\"Collision prevented on \" + l.i + \", reverting.\");\n    l.x = oldX;\n    l.y = oldY;\n    l.moved = false;\n    return layout;\n  }\n\n  // Move each item that collides away from this element.\n  for (var _i8 = 0, len = collisions.length; _i8 < len; _i8++) {\n    var collision = collisions[_i8];\n    log(\"Resolving collision between \" + l.i + \" at [\" + l.x + \",\" + l.y + \"] and \" + collision.i + \" at [\" + collision.x + \",\" + collision.y + \"]\");\n\n    // Short circuit so we can't infinite loop\n    if (collision.moved) continue;\n\n    // Don't move static items - we have to move *this* element away\n    if (collision.static) {\n      layout = moveElementAwayFromCollision(layout, collision, l, isUserAction, compactType, cols);\n    } else {\n      layout = moveElementAwayFromCollision(layout, l, collision, isUserAction, compactType, cols);\n    }\n  }\n\n  return layout;\n}\n\n/**\n * This is where the magic needs to happen - given a collision, move an element away from the collision.\n * We attempt to move it up if there's room, otherwise it goes below.\n *\n * @param  {Array} layout            Full layout to modify.\n * @param  {LayoutItem} collidesWith Layout item we're colliding with.\n * @param  {LayoutItem} itemToMove   Layout item we're moving.\n */\nfunction moveElementAwayFromCollision(layout, collidesWith, itemToMove, isUserAction, compactType, cols) {\n  var compactH = compactType === \"horizontal\";\n  var compactV = compactType === \"vertical\";\n  var preventCollision = false; // we're already colliding\n\n  // If there is enough space above the collision to put this element, move it there.\n  // We only do this on the main collision as this can get funky in cascades and cause\n  // unwanted swapping behavior.\n  if (isUserAction) {\n    // Reset isUserAction flag because we're not in the main collision anymore.\n    isUserAction = false;\n\n    // Make a mock item so we don't modify the item here, only modify in moveElement.\n    var fakeItem = {\n      x: compactH ? Math.max(collidesWith.x - itemToMove.w, 0) : itemToMove.x,\n      y: compactV ? Math.max(collidesWith.y - itemToMove.h, 0) : itemToMove.y,\n      w: itemToMove.w,\n      h: itemToMove.h,\n      i: \"-1\"\n    };\n\n    // No collision? If so, we can go up there; otherwise, we'll end up moving down as normal\n    if (!getFirstCollision(layout, fakeItem)) {\n      log(\"Doing reverse collision on \" + itemToMove.i + \" up to [\" + fakeItem.x + \",\" + fakeItem.y + \"].\");\n      return moveElement(layout, itemToMove, compactH ? fakeItem.x : undefined, compactV ? fakeItem.y : undefined, isUserAction, preventCollision, compactType, cols);\n    }\n  }\n\n  return moveElement(layout, itemToMove, compactH ? itemToMove.x + 1 : undefined, compactV ? itemToMove.y + 1 : undefined, isUserAction, preventCollision, compactType, cols);\n}\n\n/**\n * Helper to convert a number to a percentage string.\n *\n * @param  {Number} num Any number\n * @return {String}     That number as a percentage.\n */\nfunction perc(num) {\n  return num * 100 + \"%\";\n}\n\nfunction setTransform(_ref) {\n  var top = _ref.top,\n      left = _ref.left,\n      width = _ref.width,\n      height = _ref.height;\n\n  // Replace unitless items with px\n  var translate = \"translate(\" + left + \"px,\" + top + \"px)\";\n  return {\n    transform: translate,\n    WebkitTransform: translate,\n    MozTransform: translate,\n    msTransform: translate,\n    OTransform: translate,\n    width: width + \"px\",\n    height: height + \"px\",\n    position: \"absolute\"\n  };\n}\n\nfunction setTopLeft(_ref2) {\n  var top = _ref2.top,\n      left = _ref2.left,\n      width = _ref2.width,\n      height = _ref2.height;\n\n  return {\n    top: top + \"px\",\n    left: left + \"px\",\n    width: width + \"px\",\n    height: height + \"px\",\n    position: \"absolute\"\n  };\n}\n\n/**\n * Get layout items sorted from top left to right and down.\n *\n * @return {Array} Array of layout objects.\n * @return {Array}        Layout, sorted static items first.\n */\nfunction sortLayoutItems(layout, compactType) {\n  if (compactType === \"horizontal\") return sortLayoutItemsByColRow(layout);else return sortLayoutItemsByRowCol(layout);\n}\n\nfunction sortLayoutItemsByRowCol(layout) {\n  return [].concat(layout).sort(function (a, b) {\n    if (a.y > b.y || a.y === b.y && a.x > b.x) {\n      return 1;\n    } else if (a.y === b.y && a.x === b.x) {\n      // Without this, we can get different sort results in IE vs. Chrome/FF\n      return 0;\n    }\n    return -1;\n  });\n}\n\nfunction sortLayoutItemsByColRow(layout) {\n  return [].concat(layout).sort(function (a, b) {\n    if (a.x > b.x || a.x === b.x && a.y > b.y) {\n      return 1;\n    }\n    return -1;\n  });\n}\n\n/**\n * Generate a layout using the initialLayout and children as a template.\n * Missing entries will be added, extraneous ones will be truncated.\n *\n * @param  {Array}  initialLayout Layout passed in through props.\n * @param  {String} breakpoint    Current responsive breakpoint.\n * @param  {?String} compact      Compaction option.\n * @return {Array}                Working layout.\n */\nfunction synchronizeLayoutWithChildren(initialLayout, children, cols, compactType) {\n  initialLayout = initialLayout || [];\n\n  // Generate one layout item per child.\n  var layout = [];\n  _react2.default.Children.forEach(children, function (child, i) {\n    // Don't overwrite if it already exists.\n    var exists = getLayoutItem(initialLayout, String(child.key));\n    if (exists) {\n      layout[i] = cloneLayoutItem(exists);\n    } else {\n      if (!isProduction && child.props._grid) {\n        console.warn(\"`_grid` properties on children have been deprecated as of React 15.2. \" + // eslint-disable-line\n        \"Please use `data-grid` or add your properties directly to the `layout`.\");\n      }\n      var g = child.props[\"data-grid\"] || child.props._grid;\n\n      // Hey, this item has a data-grid property, use it.\n      if (g) {\n        if (!isProduction) {\n          validateLayout([g], \"ReactGridLayout.children\");\n        }\n        layout[i] = cloneLayoutItem(_extends({}, g, { i: child.key }));\n      } else {\n        // Nothing provided: ensure this is added to the bottom\n        layout[i] = cloneLayoutItem({\n          w: 1,\n          h: 1,\n          x: 0,\n          y: bottom(layout),\n          i: String(child.key)\n        });\n      }\n    }\n  });\n\n  // Correct the layout.\n  layout = correctBounds(layout, { cols: cols });\n  layout = compact(layout, compactType, cols);\n\n  return layout;\n}\n\n/**\n * Validate a layout. Throws errors.\n *\n * @param  {Array}  layout        Array of layout items.\n * @param  {String} [contextName] Context name for errors.\n * @throw  {Error}                Validation error.\n */\nfunction validateLayout(layout) {\n  var contextName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Layout\";\n\n  var subProps = [\"x\", \"y\", \"w\", \"h\"];\n  if (!Array.isArray(layout)) throw new Error(contextName + \" must be an array!\");\n  for (var _i9 = 0, len = layout.length; _i9 < len; _i9++) {\n    var item = layout[_i9];\n    for (var j = 0; j < subProps.length; j++) {\n      if (typeof item[subProps[j]] !== \"number\") {\n        throw new Error(\"ReactGridLayout: \" + contextName + \"[\" + _i9 + \"].\" + subProps[j] + \" must be a number!\");\n      }\n    }\n    if (item.i && typeof item.i !== \"string\") {\n      throw new Error(\"ReactGridLayout: \" + contextName + \"[\" + _i9 + \"].i must be a string!\");\n    }\n    if (item.static !== undefined && typeof item.static !== \"boolean\") {\n      throw new Error(\"ReactGridLayout: \" + contextName + \"[\" + _i9 + \"].static must be a boolean!\");\n    }\n  }\n}\n\n// Flow can't really figure this out, so we just use Object\nfunction autoBindHandlers(el, fns) {\n  fns.forEach(function (key) {\n    return el[key] = el[key].bind(el);\n  });\n}\n\nfunction log() {\n  var _console;\n\n  if (!DEBUG) return;\n  // eslint-disable-next-line no-console\n  (_console = console).log.apply(_console, arguments);\n}\n\nvar noop = exports.noop = function noop() {};\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-grid-layout/build/utils.js?");

/***/ }),

/***/ "../../node_modules/react-grid-layout/index.js":
/*!*****************************************************!*\
  !*** ../../node_modules/react-grid-layout/index.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./build/ReactGridLayout */ \"../../node_modules/react-grid-layout/build/ReactGridLayout.js\")[\"default\"];\nmodule.exports.utils = __webpack_require__(/*! ./build/utils */ \"../../node_modules/react-grid-layout/build/utils.js\");\nmodule.exports.Responsive = __webpack_require__(/*! ./build/ResponsiveReactGridLayout */ \"../../node_modules/react-grid-layout/build/ResponsiveReactGridLayout.js\")[\"default\"];\nmodule.exports.Responsive.utils = __webpack_require__(/*! ./build/responsiveUtils */ \"../../node_modules/react-grid-layout/build/responsiveUtils.js\");\nmodule.exports.WidthProvider = __webpack_require__(/*! ./build/components/WidthProvider */ \"../../node_modules/react-grid-layout/build/components/WidthProvider.js\")[\"default\"];\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-grid-layout/index.js?");

/***/ }),

/***/ "../../node_modules/react-resizable/build/Resizable.js":
/*!*************************************************************!*\
  !*** ../../node_modules/react-resizable/build/Resizable.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react?f8d1\"));\n\nvar _reactDraggable = __webpack_require__(/*! react-draggable */ \"../../node_modules/react-draggable/build/cjs/cjs.js\");\n\nvar _utils = __webpack_require__(/*! ./utils */ \"../../node_modules/react-resizable/build/utils.js\");\n\nvar _propTypes = __webpack_require__(/*! ./propTypes */ \"../../node_modules/react-resizable/build/propTypes.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar Resizable = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Resizable, _React$Component);\n\n  function Resizable() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", undefined);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastHandleRect\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"slack\", null);\n\n    return _this;\n  }\n\n  var _proto = Resizable.prototype;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.resetData();\n  };\n\n  _proto.lockAspectRatio = function lockAspectRatio(width, height, aspectRatio) {\n    height = width / aspectRatio;\n    width = height * aspectRatio;\n    return [width, height];\n  };\n\n  _proto.resetData = function resetData() {\n    this.lastHandleRect = this.slack = null;\n  } // Clamp width and height within provided constraints\n  ;\n\n  _proto.runConstraints = function runConstraints(width, height) {\n    var _ref = [this.props.minConstraints, this.props.maxConstraints],\n        min = _ref[0],\n        max = _ref[1];\n    if (!min && !max) return [width, height]; // If constraining to min and max, we need to also fit width and height to aspect ratio.\n\n    if (this.props.lockAspectRatio) {\n      var resizingHorizontally = height === this.props.height;\n\n      if (resizingHorizontally) {\n        var ratio = this.props.width / this.props.height;\n        height = width / ratio;\n        width = height * ratio;\n      } else {\n        // Take into account vertical resize with N/S handles on locked aspect\n        // ratio. Calculate the change height-first, instead of width-first\n        var _ratio = this.props.height / this.props.width;\n\n        width = height / _ratio;\n        height = width * _ratio;\n      }\n    }\n\n    var oldW = width,\n        oldH = height; // Add slack to the values used to calculate bound position. This will ensure that if\n    // we start removing slack, the element won't react to it right away until it's been\n    // completely removed.\n\n    var _ref2 = this.slack || [0, 0],\n        slackW = _ref2[0],\n        slackH = _ref2[1];\n\n    width += slackW;\n    height += slackH;\n\n    if (min) {\n      width = Math.max(min[0], width);\n      height = Math.max(min[1], height);\n    }\n\n    if (max) {\n      width = Math.min(max[0], width);\n      height = Math.min(max[1], height);\n    } // If the width or height changed, we must have introduced some slack. Record it for the next iteration.\n\n\n    this.slack = [slackW + (oldW - width), slackH + (oldH - height)];\n    return [width, height];\n  }\n  /**\n   * Wrapper around drag events to provide more useful data.\n   *\n   * @param  {String} handlerName Handler name to wrap.\n   * @return {Function}           Handler function.\n   */\n  ;\n\n  _proto.resizeHandler = function resizeHandler(handlerName, axis) {\n    var _this2 = this;\n\n    return function (e, _ref3) {\n      var node = _ref3.node,\n          deltaX = _ref3.deltaX,\n          deltaY = _ref3.deltaY;\n      // Reset data in case it was left over somehow (should not be possible)\n      if (handlerName === 'onResizeStart') _this2.resetData(); // Axis restrictions\n\n      var canDragX = (_this2.props.axis === 'both' || _this2.props.axis === 'x') && axis !== 'n' && axis !== 's';\n      var canDragY = (_this2.props.axis === 'both' || _this2.props.axis === 'y') && axis !== 'e' && axis !== 'w'; // No dragging possible.\n\n      if (!canDragX && !canDragY) return; // Decompose axis for later use\n\n      var axisV = axis[0];\n      var axisH = axis[axis.length - 1]; // intentionally not axis[1], so that this catches axis === 'w' for example\n      // Track the element being dragged to account for changes in position.\n      // If a handle's position is changed between callbacks, we need to factor this in to the next callback.\n      // Failure to do so will cause the element to \"skip\" when resized upwards or leftwards.\n\n      var handleRect = node.getBoundingClientRect();\n\n      if (_this2.lastHandleRect != null) {\n        // If the handle has repositioned on either axis since last render,\n        // we need to increase our callback values by this much.\n        // Only checking 'n', 'w' since resizing by 's', 'w' won't affect the overall position on page,\n        if (axisH === 'w') {\n          var deltaLeftSinceLast = handleRect.left - _this2.lastHandleRect.left;\n          deltaX += deltaLeftSinceLast;\n        }\n\n        if (axisV === 'n') {\n          var deltaTopSinceLast = handleRect.top - _this2.lastHandleRect.top;\n          deltaY += deltaTopSinceLast;\n        }\n      } // Storage of last rect so we know how much it has really moved.\n\n\n      _this2.lastHandleRect = handleRect; // Reverse delta if using top or left drag handles.\n\n      if (axisH === 'w') deltaX = -deltaX;\n      if (axisV === 'n') deltaY = -deltaY; // Update w/h by the deltas. Also factor in transformScale.\n\n      var width = _this2.props.width + (canDragX ? deltaX / _this2.props.transformScale : 0);\n      var height = _this2.props.height + (canDragY ? deltaY / _this2.props.transformScale : 0); // Run user-provided constraints.\n\n      var _this2$runConstraints = _this2.runConstraints(width, height);\n\n      width = _this2$runConstraints[0];\n      height = _this2$runConstraints[1];\n      var dimensionsChanged = width !== _this2.props.width || height !== _this2.props.height; // Call user-supplied callback if present.\n\n      var cb = typeof _this2.props[handlerName] === 'function' ? _this2.props[handlerName] : null; // Don't call 'onResize' if dimensions haven't changed.\n\n      var shouldSkipCb = handlerName === 'onResize' && !dimensionsChanged;\n\n      if (cb && !shouldSkipCb) {\n        if (typeof e.persist === 'function') e.persist();\n        cb(e, {\n          node: node,\n          size: {\n            width: width,\n            height: height\n          },\n          handle: axis\n        });\n      } // Reset internal data\n\n\n      if (handlerName === 'onResizeStop') _this2.resetData();\n    };\n  };\n\n  _proto.renderResizeHandle = function renderResizeHandle(resizeHandleAxis) {\n    var handle = this.props.handle;\n\n    if (handle) {\n      if (typeof handle === 'function') {\n        return handle(resizeHandleAxis);\n      }\n\n      return handle;\n    }\n\n    return /*#__PURE__*/_react.default.createElement(\"span\", {\n      className: \"react-resizable-handle react-resizable-handle-\" + resizeHandleAxis\n    });\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n\n    // Pass along only props not meant for the `<Resizable>`.`\n    // eslint-disable-next-line no-unused-vars\n    var _this$props = this.props,\n        children = _this$props.children,\n        className = _this$props.className,\n        draggableOpts = _this$props.draggableOpts,\n        width = _this$props.width,\n        height = _this$props.height,\n        handle = _this$props.handle,\n        handleSize = _this$props.handleSize,\n        lockAspectRatio = _this$props.lockAspectRatio,\n        axis = _this$props.axis,\n        minConstraints = _this$props.minConstraints,\n        maxConstraints = _this$props.maxConstraints,\n        onResize = _this$props.onResize,\n        onResizeStop = _this$props.onResizeStop,\n        onResizeStart = _this$props.onResizeStart,\n        resizeHandles = _this$props.resizeHandles,\n        transformScale = _this$props.transformScale,\n        p = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"className\", \"draggableOpts\", \"width\", \"height\", \"handle\", \"handleSize\", \"lockAspectRatio\", \"axis\", \"minConstraints\", \"maxConstraints\", \"onResize\", \"onResizeStop\", \"onResizeStart\", \"resizeHandles\", \"transformScale\"]); // What we're doing here is getting the child of this element, and cloning it with this element's props.\n    // We are then defining its children as:\n    // Its original children (resizable's child's children), and\n    // One or more draggable handles.\n\n\n    return (0, _utils.cloneElement)(children, _objectSpread(_objectSpread({}, p), {}, {\n      className: (className ? className + \" \" : '') + \"react-resizable\",\n      children: [].concat(children.props.children, resizeHandles.map(function (handleAxis) {\n        return /*#__PURE__*/_react.default.createElement(_reactDraggable.DraggableCore, _extends({}, draggableOpts, {\n          key: \"resizableHandle-\" + handleAxis,\n          onStop: _this3.resizeHandler('onResizeStop', handleAxis),\n          onStart: _this3.resizeHandler('onResizeStart', handleAxis),\n          onDrag: _this3.resizeHandler('onResize', handleAxis)\n        }), _this3.renderResizeHandle(handleAxis));\n      }))\n    }));\n  };\n\n  return Resizable;\n}(_react.default.Component);\n\nexports[\"default\"] = Resizable;\n\n_defineProperty(Resizable, \"propTypes\", _propTypes.resizableProps);\n\n_defineProperty(Resizable, \"defaultProps\", {\n  handleSize: [20, 20],\n  lockAspectRatio: false,\n  axis: 'both',\n  minConstraints: [20, 20],\n  maxConstraints: [Infinity, Infinity],\n  resizeHandles: ['se'],\n  transformScale: 1\n});\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-resizable/build/Resizable.js?");

/***/ }),

/***/ "../../node_modules/react-resizable/build/ResizableBox.js":
/*!****************************************************************!*\
  !*** ../../node_modules/react-resizable/build/ResizableBox.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react?f8d1\"));\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"../../node_modules/prop-types/index.js\"));\n\nvar _Resizable = _interopRequireDefault(__webpack_require__(/*! ./Resizable */ \"../../node_modules/react-resizable/build/Resizable.js\"));\n\nvar _propTypes2 = __webpack_require__(/*! ./propTypes */ \"../../node_modules/react-resizable/build/propTypes.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar ResizableBox = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ResizableBox, _React$Component);\n\n  function ResizableBox() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      width: _this.props.width,\n      height: _this.props.height,\n      propsWidth: _this.props.width,\n      propsHeight: _this.props.height\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function (e, data) {\n      var size = data.size;\n\n      if (_this.props.onResize) {\n        e.persist && e.persist();\n\n        _this.setState(size, function () {\n          return _this.props.onResize && _this.props.onResize(e, data);\n        });\n      } else {\n        _this.setState(size);\n      }\n    });\n\n    return _this;\n  }\n\n  ResizableBox.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    // If parent changes height/width, set that in our state.\n    if (state.propsWidth !== props.width || state.propsHeight !== props.height) {\n      return {\n        width: props.width,\n        height: props.height,\n        propsWidth: props.width,\n        propsHeight: props.height\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = ResizableBox.prototype;\n\n  _proto.render = function render() {\n    // Basic wrapper around a Resizable instance.\n    // If you use Resizable directly, you are responsible for updating the child component\n    // with a new width and height.\n    var _this$props = this.props,\n        handle = _this$props.handle,\n        handleSize = _this$props.handleSize,\n        onResize = _this$props.onResize,\n        onResizeStart = _this$props.onResizeStart,\n        onResizeStop = _this$props.onResizeStop,\n        draggableOpts = _this$props.draggableOpts,\n        minConstraints = _this$props.minConstraints,\n        maxConstraints = _this$props.maxConstraints,\n        lockAspectRatio = _this$props.lockAspectRatio,\n        axis = _this$props.axis,\n        width = _this$props.width,\n        height = _this$props.height,\n        resizeHandles = _this$props.resizeHandles,\n        style = _this$props.style,\n        transformScale = _this$props.transformScale,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"handle\", \"handleSize\", \"onResize\", \"onResizeStart\", \"onResizeStop\", \"draggableOpts\", \"minConstraints\", \"maxConstraints\", \"lockAspectRatio\", \"axis\", \"width\", \"height\", \"resizeHandles\", \"style\", \"transformScale\"]);\n\n    return /*#__PURE__*/React.createElement(_Resizable.default, {\n      axis: axis,\n      draggableOpts: draggableOpts,\n      handle: handle,\n      handleSize: handleSize,\n      height: this.state.height,\n      lockAspectRatio: lockAspectRatio,\n      maxConstraints: maxConstraints,\n      minConstraints: minConstraints,\n      onResizeStart: onResizeStart,\n      onResize: this.onResize,\n      onResizeStop: onResizeStop,\n      resizeHandles: resizeHandles,\n      transformScale: transformScale,\n      width: this.state.width\n    }, /*#__PURE__*/React.createElement(\"div\", _extends({}, props, {\n      style: _objectSpread(_objectSpread({}, style), {}, {\n        width: this.state.width + 'px',\n        height: this.state.height + 'px'\n      })\n    })));\n  };\n\n  return ResizableBox;\n}(React.Component);\n\nexports[\"default\"] = ResizableBox;\n\n_defineProperty(ResizableBox, \"propTypes\", _objectSpread(_objectSpread({}, _propTypes2.resizableProps), {}, {\n  children: _propTypes.default.element\n}));\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-resizable/build/ResizableBox.js?");

/***/ }),

/***/ "../../node_modules/react-resizable/build/propTypes.js":
/*!*************************************************************!*\
  !*** ../../node_modules/react-resizable/build/propTypes.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.resizableProps = void 0;\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"../../node_modules/prop-types/index.js\"));\n\nvar _reactDraggable = __webpack_require__(/*! react-draggable */ \"../../node_modules/react-draggable/build/cjs/cjs.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar resizableProps = {\n  /*\n  * Restricts resizing to a particular axis (default: 'both')\n  * 'both' - allows resizing by width or height\n  * 'x' - only allows the width to be changed\n  * 'y' - only allows the height to be changed\n  * 'none' - disables resizing altogether\n  * */\n  axis: _propTypes.default.oneOf(['both', 'x', 'y', 'none']),\n  className: _propTypes.default.string,\n\n  /*\n  * Require that one and only one child be present.\n  * */\n  children: _propTypes.default.element.isRequired,\n\n  /*\n  * These will be passed wholesale to react-draggable's DraggableCore\n  * */\n  draggableOpts: _propTypes.default.shape({\n    allowAnyClick: _propTypes.default.bool,\n    cancel: _propTypes.default.string,\n    children: _propTypes.default.node,\n    disabled: _propTypes.default.bool,\n    enableUserSelectHack: _propTypes.default.bool,\n    offsetParent: _propTypes.default.node,\n    grid: _propTypes.default.arrayOf(_propTypes.default.number),\n    handle: _propTypes.default.string,\n    nodeRef: _propTypes.default.object,\n    onStart: _propTypes.default.func,\n    onDrag: _propTypes.default.func,\n    onStop: _propTypes.default.func,\n    onMouseDown: _propTypes.default.func,\n    scale: _propTypes.default.number\n  }),\n\n  /*\n  * Initial height\n  * */\n  height: _propTypes.default.number.isRequired,\n\n  /*\n  * Customize cursor resize handle\n  * */\n  handle: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),\n\n  /*\n  * If you change this, be sure to update your css\n  * */\n  handleSize: _propTypes.default.arrayOf(_propTypes.default.number),\n  lockAspectRatio: _propTypes.default.bool,\n\n  /*\n  * Max X & Y measure\n  * */\n  maxConstraints: _propTypes.default.arrayOf(_propTypes.default.number),\n\n  /*\n  * Min X & Y measure\n  * */\n  minConstraints: _propTypes.default.arrayOf(_propTypes.default.number),\n\n  /*\n  * Called on stop resize event\n  * */\n  onResizeStop: _propTypes.default.func,\n\n  /*\n  * Called on start resize event\n  * */\n  onResizeStart: _propTypes.default.func,\n\n  /*\n  * Called on resize event\n  * */\n  onResize: _propTypes.default.func,\n\n  /*\n  * Defines which resize handles should be rendered (default: 'se')\n  * 's' - South handle (bottom-center)\n  * 'w' - West handle (left-center)\n  * 'e' - East handle (right-center)\n  * 'n' - North handle (top-center)\n  * 'sw' - Southwest handle (bottom-left)\n  * 'nw' - Northwest handle (top-left)\n  * 'se' - Southeast handle (bottom-right)\n  * 'ne' - Northeast handle (top-center)\n  * */\n  resizeHandles: _propTypes.default.arrayOf(_propTypes.default.oneOf(['s', 'w', 'e', 'n', 'sw', 'nw', 'se', 'ne'])),\n\n  /*\n  * If `transform: scale(n)` is set on the parent, this should be set to `n`.\n  * */\n  transformScale: _propTypes.default.number,\n\n  /*\n   * Initial width\n   */\n  width: _propTypes.default.number.isRequired\n};\nexports.resizableProps = resizableProps;\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-resizable/build/propTypes.js?");

/***/ }),

/***/ "../../node_modules/react-resizable/build/utils.js":
/*!*********************************************************!*\
  !*** ../../node_modules/react-resizable/build/utils.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.__esModule = true;\nexports.cloneElement = cloneElement;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react?f8d1\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// React.addons.cloneWithProps look-alike that merges style & className.\nfunction cloneElement(element, props) {\n  if (props.style && element.props.style) {\n    props.style = _objectSpread(_objectSpread({}, element.props.style), props.style);\n  }\n\n  if (props.className && element.props.className) {\n    props.className = element.props.className + \" \" + props.className;\n  }\n\n  return /*#__PURE__*/_react.default.cloneElement(element, props);\n}\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-resizable/build/utils.js?");

/***/ }),

/***/ "../../node_modules/react-resizable/index.js":
/*!***************************************************!*\
  !*** ../../node_modules/react-resizable/index.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = function() {\n  throw new Error(\"Don't instantiate Resizable directly! Use require('react-resizable').Resizable\");\n};\n\nmodule.exports.Resizable = __webpack_require__(/*! ./build/Resizable */ \"../../node_modules/react-resizable/build/Resizable.js\")[\"default\"];\nmodule.exports.ResizableBox = __webpack_require__(/*! ./build/ResizableBox */ \"../../node_modules/react-resizable/build/ResizableBox.js\")[\"default\"];\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-resizable/index.js?");

/***/ }),

/***/ "../../node_modules/react-grid-layout/node_modules/react-draggable/dist/react-draggable.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/react-grid-layout/node_modules/react-draggable/dist/react-draggable.js ***!
  \*************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _indexOfInstanceProperty = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/instance/index-of */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js\");\nvar _concatInstanceProperty = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/instance/concat */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js\");\nvar _Object$getOwnPropertySymbols = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols.js\");\nvar _Object$assign = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/object/assign */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/object/assign.js\");\nvar _Object$getOwnPropertyNames = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/object/get-own-property-names */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/object/get-own-property-names.js\");\nvar _mapInstanceProperty = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/instance/map */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js\");\nvar _Object$keys = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/object/keys */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/object/keys.js\");\nvar _Symbol = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/symbol */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js\");\nvar _Symbol$iterator = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/symbol/iterator */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/symbol/iterator.js\");\nvar _JSON$stringify = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/json/stringify */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/json/stringify.js\");\nvar _entriesInstanceProperty = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/instance/entries */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/instance/entries.js\");\nvar _Symbol$for = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/symbol/for */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/symbol/for.js\");\nvar _parseInt = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/parse-int */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js\");\nvar _Object$defineProperty = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/object/define-property */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js\");\nvar _Object$setPrototypeOf = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/object/set-prototype-of */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/object/set-prototype-of.js\");\nvar _getIterator = __webpack_require__(/*! @babel/runtime-corejs3/core-js/get-iterator */ \"../../node_modules/@babel/runtime-corejs3/core-js/get-iterator.js\");\nvar _isIterable = __webpack_require__(/*! @babel/runtime-corejs3/core-js/is-iterable */ \"../../node_modules/@babel/runtime-corejs3/core-js/is-iterable.js\");\nvar _Object$getPrototypeOf = __webpack_require__(/*! @babel/runtime-corejs3/core-js-stable/object/get-prototype-of */ \"../../node_modules/@babel/runtime-corejs3/core-js-stable/object/get-prototype-of.js\");\nvar _typeof = __webpack_require__(/*! @babel/runtime-corejs3/helpers/typeof */ \"../../node_modules/@babel/runtime-corejs3/helpers/typeof.js\");\n__webpack_require__(/*! core-js/modules/es.array.join.js */ \"../../node_modules/core-js/modules/es.array.join.js\");\n__webpack_require__(/*! core-js/modules/es.function.name.js */ \"../../node_modules/core-js/modules/es.function.name.js\");\n__webpack_require__(/*! core-js/modules/es.object.to-string.js */ \"../../node_modules/core-js/modules/es.object.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ \"../../node_modules/core-js/modules/es.regexp.constructor.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ \"../../node_modules/core-js/modules/es.regexp.exec.js\");\n__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"../../node_modules/core-js/modules/es.regexp.to-string.js\");\n__webpack_require__(/*! core-js/modules/es.string.match.js */ \"../../node_modules/core-js/modules/es.string.match.js\");\n__webpack_require__(/*! core-js/modules/es.string.replace.js */ \"../../node_modules/core-js/modules/es.string.replace.js\");\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ \"../../node_modules/core-js/modules/web.dom-collections.for-each.js\");\n(function (global, factory) {\n  ( false ? 0 : _typeof(exports)) === 'object' && \"object\" !== 'undefined' ? module.exports = factory(__webpack_require__(/*! react-dom */ \"webpack/sharing/consume/default/react-dom/react-dom?86a8\"), __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react?82aa\")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! react-dom */ \"webpack/sharing/consume/default/react-dom/react-dom?86a8\"), __webpack_require__(/*! react */ \"webpack/sharing/consume/default/react/react?82aa\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : 0;\n})(this, function (ReactDOM, React) {\n  'use strict';\n\n  ReactDOM = ReactDOM && ReactDOM.hasOwnProperty('default') ? ReactDOM['default'] : ReactDOM;\n  React = React && React.hasOwnProperty('default') ? React['default'] : React;\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\n  function makeEmptyFunction(arg) {\n    return function () {\n      return arg;\n    };\n  }\n\n  /**\n   * This function accepts and discards inputs; it has no side effects. This is\n   * primarily useful idiomatically for overridable function endpoints which\n   * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n   */\n  var emptyFunction = function emptyFunction() {};\n  emptyFunction.thatReturns = makeEmptyFunction;\n  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);\n  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);\n  emptyFunction.thatReturnsNull = makeEmptyFunction(null);\n  emptyFunction.thatReturnsThis = function () {\n    return this;\n  };\n  emptyFunction.thatReturnsArgument = function (arg) {\n    return arg;\n  };\n  var emptyFunction_1 = emptyFunction;\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   */\n\n  /**\n   * Use invariant() to assert state which your program assumes to be true.\n   *\n   * Provide sprintf-style format (only %s is supported) and arguments\n   * to provide information about what broke and what you were\n   * expecting.\n   *\n   * The invariant message will be stripped in production, but the invariant\n   * will remain to ensure logic does not differ in production.\n   */\n\n  var validateFormat = function validateFormat(format) {};\n  {\n    validateFormat = function validateFormat(format) {\n      if (format === undefined) {\n        throw new Error('invariant requires an error message argument');\n      }\n    };\n  }\n  function invariant(condition, format, a, b, c, d, e, f) {\n    validateFormat(format);\n    if (!condition) {\n      var error;\n      if (format === undefined) {\n        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n      } else {\n        var args = [a, b, c, d, e, f];\n        var argIndex = 0;\n        error = new Error(format.replace(/%s/g, function () {\n          return args[argIndex++];\n        }));\n        error.name = 'Invariant Violation';\n      }\n      error.framesToPop = 1; // we don't care about invariant's own frame\n      throw error;\n    }\n  }\n  var invariant_1 = invariant;\n\n  /**\n   * Similar to invariant but only logs a warning if the condition is not met.\n   * This can be used to log issues in development environments in critical\n   * paths. Removing the logging code for production environments will keep the\n   * same logic and follow the same code paths.\n   */\n\n  var warning = emptyFunction_1;\n  {\n    var printWarning = function printWarning(format) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    };\n    warning = function warning(condition, format) {\n      if (format === undefined) {\n        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n      }\n      if (_indexOfInstanceProperty(format).call(format, 'Failed Composite propType: ') === 0) {\n        return; // Ignore CompositeComponent proptype check.\n      }\n      if (!condition) {\n        var _context;\n        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];\n        }\n        printWarning.apply(undefined, _concatInstanceProperty(_context = [format]).call(_context, args));\n      }\n    };\n  }\n  var warning_1 = warning;\n\n  /*\n  object-assign\n  (c) Sindre Sorhus\n  @license MIT\n  */\n  /* eslint-disable no-unused-vars */\n  var getOwnPropertySymbols = _Object$getOwnPropertySymbols;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n  function toObject(val) {\n    if (val === null || val === undefined) {\n      throw new TypeError('Object.assign cannot be called with null or undefined');\n    }\n    return Object(val);\n  }\n  function shouldUseNative() {\n    try {\n      var _context2;\n      if (!_Object$assign) {\n        return false;\n      }\n\n      // Detect buggy property enumeration order in older V8 versions.\n\n      // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n      var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n      test1[5] = 'de';\n      if (_Object$getOwnPropertyNames(test1)[0] === '5') {\n        return false;\n      }\n\n      // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n      var test2 = {};\n      for (var i = 0; i < 10; i++) {\n        test2['_' + String.fromCharCode(i)] = i;\n      }\n      var order2 = _mapInstanceProperty(_context2 = _Object$getOwnPropertyNames(test2)).call(_context2, function (n) {\n        return test2[n];\n      });\n      if (order2.join('') !== '0123456789') {\n        return false;\n      }\n\n      // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n      var test3 = {};\n      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n        test3[letter] = letter;\n      });\n      if (_Object$keys(_Object$assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n        return false;\n      }\n      return true;\n    } catch (err) {\n      // We don't expect any of the above to throw, but better to be safe.\n      return false;\n    }\n  }\n  var objectAssign = shouldUseNative() ? _Object$assign : function (target, source) {\n    var from;\n    var to = toObject(target);\n    var symbols;\n    for (var s = 1; s < arguments.length; s++) {\n      from = Object(arguments[s]);\n      for (var key in from) {\n        if (hasOwnProperty.call(from, key)) {\n          to[key] = from[key];\n        }\n      }\n      if (getOwnPropertySymbols) {\n        symbols = getOwnPropertySymbols(from);\n        for (var i = 0; i < symbols.length; i++) {\n          if (propIsEnumerable.call(from, symbols[i])) {\n            to[symbols[i]] = from[symbols[i]];\n          }\n        }\n      }\n    }\n    return to;\n  };\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\n  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n  var ReactPropTypesSecret_1 = ReactPropTypesSecret;\n  {\n    var invariant$1 = invariant_1;\n    var warning$1 = warning_1;\n    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;\n    var loggedTypeFailures = {};\n  }\n\n  /**\n   * Assert that the values match with the type specs.\n   * Error messages are memorized and will only be shown once.\n   *\n   * @param {object} typeSpecs Map of name to a ReactPropType\n   * @param {object} values Runtime values that need to be type-checked\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @param {string} componentName Name of the component for error messages.\n   * @param {?Function} getStack Returns the component stack.\n   * @private\n   */\n  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n    {\n      for (var typeSpecName in typeSpecs) {\n        if (typeSpecs.hasOwnProperty(typeSpecName)) {\n          var error;\n          // Prop type validation may throw. In case they do, we don't want to\n          // fail the render phase where it didn't fail before. So we log it.\n          // After these have been cleaned up, we'll let them throw.\n          try {\n            // This is intentionally an invariant that gets caught. It's the same\n            // behavior as without this statement except with a better message.\n            invariant$1(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, _typeof(typeSpecs[typeSpecName]));\n            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);\n          } catch (ex) {\n            error = ex;\n          }\n          warning$1(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, _typeof(error));\n          if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n            // Only monitor this failure once because there tends to be a lot of the\n            // same error.\n            loggedTypeFailures[error.message] = true;\n            var stack = getStack ? getStack() : '';\n            warning$1(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n          }\n        }\n      }\n    }\n  }\n  var checkPropTypes_1 = checkPropTypes;\n  var factoryWithTypeCheckers = function factoryWithTypeCheckers(isValidElement, throwOnDirectAccess) {\n    /* global Symbol */\n    var ITERATOR_SYMBOL = typeof _Symbol === 'function' && _Symbol$iterator;\n    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n    /**\n     * Returns the iterator method function contained on the iterable object.\n     *\n     * Be sure to invoke the function with the iterable as context:\n     *\n     *     var iteratorFn = getIteratorFn(myIterable);\n     *     if (iteratorFn) {\n     *       var iterator = iteratorFn.call(myIterable);\n     *       ...\n     *     }\n     *\n     * @param {?object} maybeIterable\n     * @return {?function}\n     */\n    function getIteratorFn(maybeIterable) {\n      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n      if (typeof iteratorFn === 'function') {\n        return iteratorFn;\n      }\n    }\n\n    /**\n     * Collection of methods that allow declaration and validation of props that are\n     * supplied to React components. Example usage:\n     *\n     *   var Props = require('ReactPropTypes');\n     *   var MyArticle = React.createClass({\n     *     propTypes: {\n     *       // An optional string prop named \"description\".\n     *       description: Props.string,\n     *\n     *       // A required enum prop named \"category\".\n     *       category: Props.oneOf(['News','Photos']).isRequired,\n     *\n     *       // A prop named \"dialog\" that requires an instance of Dialog.\n     *       dialog: Props.instanceOf(Dialog).isRequired\n     *     },\n     *     render: function() { ... }\n     *   });\n     *\n     * A more formal specification of how these methods are used:\n     *\n     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n     *   decl := ReactPropTypes.{type}(.isRequired)?\n     *\n     * Each and every declaration produces a function with the same signature. This\n     * allows the creation of custom validation functions. For example:\n     *\n     *  var MyLink = React.createClass({\n     *    propTypes: {\n     *      // An optional string or URI prop named \"href\".\n     *      href: function(props, propName, componentName) {\n     *        var propValue = props[propName];\n     *        if (propValue != null && typeof propValue !== 'string' &&\n     *            !(propValue instanceof URI)) {\n     *          return new Error(\n     *            'Expected a string or an URI for ' + propName + ' in ' +\n     *            componentName\n     *          );\n     *        }\n     *      }\n     *    },\n     *    render: function() {...}\n     *  });\n     *\n     * @internal\n     */\n\n    var ANONYMOUS = '<<anonymous>>';\n\n    // Important!\n    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n    var ReactPropTypes = {\n      array: createPrimitiveTypeChecker('array'),\n      bool: createPrimitiveTypeChecker('boolean'),\n      func: createPrimitiveTypeChecker('function'),\n      number: createPrimitiveTypeChecker('number'),\n      object: createPrimitiveTypeChecker('object'),\n      string: createPrimitiveTypeChecker('string'),\n      symbol: createPrimitiveTypeChecker('symbol'),\n      any: createAnyTypeChecker(),\n      arrayOf: createArrayOfTypeChecker,\n      element: createElementTypeChecker(),\n      instanceOf: createInstanceTypeChecker,\n      node: createNodeChecker(),\n      objectOf: createObjectOfTypeChecker,\n      oneOf: createEnumTypeChecker,\n      oneOfType: createUnionTypeChecker,\n      shape: createShapeTypeChecker,\n      exact: createStrictShapeTypeChecker\n    };\n\n    /**\n     * inlined Object.is polyfill to avoid requiring consumers ship their own\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n     */\n    /*eslint-disable no-self-compare*/\n    function is(x, y) {\n      // SameValue algorithm\n      if (x === y) {\n        // Steps 1-5, 7-10\n        // Steps 6.b-6.e: +0 != -0\n        return x !== 0 || 1 / x === 1 / y;\n      } else {\n        // Step 6.a: NaN == NaN\n        return x !== x && y !== y;\n      }\n    }\n    /*eslint-enable no-self-compare*/\n\n    /**\n     * We use an Error-like object for backward compatibility as people may call\n     * PropTypes directly and inspect their output. However, we don't use real\n     * Errors anymore. We don't inspect their stack anyway, and creating them\n     * is prohibitively expensive if they are created too often, such as what\n     * happens in oneOfType() for any type before the one that matched.\n     */\n    function PropTypeError(message) {\n      this.message = message;\n      this.stack = '';\n    }\n    // Make `instanceof Error` still work for returned errors.\n    PropTypeError.prototype = Error.prototype;\n    function createChainableTypeChecker(validate) {\n      {\n        var manualPropTypeCallCache = {};\n        var manualPropTypeWarningCount = 0;\n      }\n      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n        componentName = componentName || ANONYMOUS;\n        propFullName = propFullName || propName;\n        if (secret !== ReactPropTypesSecret_1) {\n          if (throwOnDirectAccess) {\n            // New behavior only for users of `prop-types` package\n            invariant_1(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');\n          } else if ( true && typeof console !== 'undefined') {\n            // Old behavior for people using React.PropTypes\n            var cacheKey = componentName + ':' + propName;\n            if (!manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3) {\n              warning_1(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);\n              manualPropTypeCallCache[cacheKey] = true;\n              manualPropTypeWarningCount++;\n            }\n          }\n        }\n        if (props[propName] == null) {\n          if (isRequired) {\n            if (props[propName] === null) {\n              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n            }\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n          }\n          return null;\n        } else {\n          return validate(props, propName, componentName, location, propFullName);\n        }\n      }\n      var chainedCheckType = checkType.bind(null, false);\n      chainedCheckType.isRequired = checkType.bind(null, true);\n      return chainedCheckType;\n    }\n    function createPrimitiveTypeChecker(expectedType) {\n      function validate(props, propName, componentName, location, propFullName, secret) {\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== expectedType) {\n          // `propValue` being instance of, say, date/regexp, pass the 'object'\n          // check, but we can offer a more precise error message here rather than\n          // 'of type `object`'.\n          var preciseType = getPreciseType(propValue);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n    function createAnyTypeChecker() {\n      return createChainableTypeChecker(emptyFunction_1.thatReturnsNull);\n    }\n    function createArrayOfTypeChecker(typeChecker) {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (typeof typeChecker !== 'function') {\n          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n        }\n        var propValue = props[propName];\n        if (!Array.isArray(propValue)) {\n          var propType = getPropType(propValue);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n        }\n        for (var i = 0; i < propValue.length; i++) {\n          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n    function createElementTypeChecker() {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        if (!isValidElement(propValue)) {\n          var propType = getPropType(propValue);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n    function createInstanceTypeChecker(expectedClass) {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (!(props[propName] instanceof expectedClass)) {\n          var expectedClassName = expectedClass.name || ANONYMOUS;\n          var actualClassName = getClassName(props[propName]);\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n    function createEnumTypeChecker(expectedValues) {\n      if (!Array.isArray(expectedValues)) {\n        warning_1(false, 'Invalid argument supplied to oneOf, expected an instance of array.');\n        return emptyFunction_1.thatReturnsNull;\n      }\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        for (var i = 0; i < expectedValues.length; i++) {\n          if (is(propValue, expectedValues[i])) {\n            return null;\n          }\n        }\n        var valuesString = _JSON$stringify(expectedValues);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n      }\n      return createChainableTypeChecker(validate);\n    }\n    function createObjectOfTypeChecker(typeChecker) {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (typeof typeChecker !== 'function') {\n          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n        }\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== 'object') {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n        }\n        for (var key in propValue) {\n          if (propValue.hasOwnProperty(key)) {\n            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n            if (error instanceof Error) {\n              return error;\n            }\n          }\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n    function createUnionTypeChecker(arrayOfTypeCheckers) {\n      if (!Array.isArray(arrayOfTypeCheckers)) {\n        warning_1(false, 'Invalid argument supplied to oneOfType, expected an instance of array.');\n        return emptyFunction_1.thatReturnsNull;\n      }\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (typeof checker !== 'function') {\n          warning_1(false, 'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);\n          return emptyFunction_1.thatReturnsNull;\n        }\n      }\n      function validate(props, propName, componentName, location, propFullName) {\n        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n          var checker = arrayOfTypeCheckers[i];\n          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {\n            return null;\n          }\n        }\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n      }\n      return createChainableTypeChecker(validate);\n    }\n    function createNodeChecker() {\n      function validate(props, propName, componentName, location, propFullName) {\n        if (!isNode(props[propName])) {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n    function createShapeTypeChecker(shapeTypes) {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== 'object') {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n        }\n        for (var key in shapeTypes) {\n          var checker = shapeTypes[key];\n          if (!checker) {\n            continue;\n          }\n          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n          if (error) {\n            return error;\n          }\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n    function createStrictShapeTypeChecker(shapeTypes) {\n      function validate(props, propName, componentName, location, propFullName) {\n        var propValue = props[propName];\n        var propType = getPropType(propValue);\n        if (propType !== 'object') {\n          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n        }\n        // We need to check all keys in case some are required but missing from\n        // props.\n        var allKeys = objectAssign({}, props[propName], shapeTypes);\n        for (var key in allKeys) {\n          var checker = shapeTypes[key];\n          if (!checker) {\n            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\\nBad object: ' + _JSON$stringify(props[propName], null, '  ') + '\\nValid keys: ' + _JSON$stringify(_Object$keys(shapeTypes), null, '  '));\n          }\n          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);\n          if (error) {\n            return error;\n          }\n        }\n        return null;\n      }\n      return createChainableTypeChecker(validate);\n    }\n    function isNode(propValue) {\n      switch (_typeof(propValue)) {\n        case 'number':\n        case 'string':\n        case 'undefined':\n          return true;\n        case 'boolean':\n          return !propValue;\n        case 'object':\n          if (Array.isArray(propValue)) {\n            return propValue.every(isNode);\n          }\n          if (propValue === null || isValidElement(propValue)) {\n            return true;\n          }\n          var iteratorFn = getIteratorFn(propValue);\n          if (iteratorFn) {\n            var iterator = iteratorFn.call(propValue);\n            var step;\n            if (iteratorFn !== _entriesInstanceProperty(propValue)) {\n              while (!(step = iterator.next()).done) {\n                if (!isNode(step.value)) {\n                  return false;\n                }\n              }\n            } else {\n              // Iterator will provide entry [k,v] tuples rather than values.\n              while (!(step = iterator.next()).done) {\n                var entry = step.value;\n                if (entry) {\n                  if (!isNode(entry[1])) {\n                    return false;\n                  }\n                }\n              }\n            }\n          } else {\n            return false;\n          }\n          return true;\n        default:\n          return false;\n      }\n    }\n    function isSymbol(propType, propValue) {\n      // Native Symbol.\n      if (propType === 'symbol') {\n        return true;\n      }\n\n      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n      if (propValue['@@toStringTag'] === 'Symbol') {\n        return true;\n      }\n\n      // Fallback for non-spec compliant Symbols which are polyfilled.\n      if (typeof _Symbol === 'function' && propValue instanceof _Symbol) {\n        return true;\n      }\n      return false;\n    }\n\n    // Equivalent of `typeof` but with special handling for array and regexp.\n    function getPropType(propValue) {\n      var propType = _typeof(propValue);\n      if (Array.isArray(propValue)) {\n        return 'array';\n      }\n      if (propValue instanceof RegExp) {\n        // Old webkits (at least until Android 4.0) return 'function' rather than\n        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n        // passes PropTypes.object.\n        return 'object';\n      }\n      if (isSymbol(propType, propValue)) {\n        return 'symbol';\n      }\n      return propType;\n    }\n\n    // This handles more types than `getPropType`. Only used for error messages.\n    // See `createPrimitiveTypeChecker`.\n    function getPreciseType(propValue) {\n      if (typeof propValue === 'undefined' || propValue === null) {\n        return '' + propValue;\n      }\n      var propType = getPropType(propValue);\n      if (propType === 'object') {\n        if (propValue instanceof Date) {\n          return 'date';\n        } else if (propValue instanceof RegExp) {\n          return 'regexp';\n        }\n      }\n      return propType;\n    }\n\n    // Returns a string that is postfixed to a warning about an invalid type.\n    // For example, \"undefined\" or \"of type array\"\n    function getPostfixForTypeWarning(value) {\n      var type = getPreciseType(value);\n      switch (type) {\n        case 'array':\n        case 'object':\n          return 'an ' + type;\n        case 'boolean':\n        case 'date':\n        case 'regexp':\n          return 'a ' + type;\n        default:\n          return type;\n      }\n    }\n\n    // Returns class name of the object, if any.\n    function getClassName(propValue) {\n      if (!propValue.constructor || !propValue.constructor.name) {\n        return ANONYMOUS;\n      }\n      return propValue.constructor.name;\n    }\n    ReactPropTypes.checkPropTypes = checkPropTypes_1;\n    ReactPropTypes.PropTypes = ReactPropTypes;\n    return ReactPropTypes;\n  };\n  var propTypes = createCommonjsModule(function (module) {\n    /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\n    {\n      var REACT_ELEMENT_TYPE = typeof _Symbol === 'function' && _Symbol$for && _Symbol$for('react.element') || 0xeac7;\n      var isValidElement = function isValidElement(object) {\n        return _typeof(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n      };\n\n      // By explicitly using `prop-types` you are opting into new development behavior.\n      // http://fb.me/prop-types-in-prod\n      var throwOnDirectAccess = true;\n      module.exports = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);\n    }\n  });\n  var classnames = createCommonjsModule(function (module) {\n    /*!\n      Copyright (c) 2016 Jed Watson.\n      Licensed under the MIT License (MIT), see\n      http://jedwatson.github.io/classnames\n    */\n    /* global define */\n\n    (function () {\n      var hasOwn = {}.hasOwnProperty;\n      function classNames() {\n        var classes = [];\n        for (var i = 0; i < arguments.length; i++) {\n          var arg = arguments[i];\n          if (!arg) continue;\n          var argType = _typeof(arg);\n          if (argType === 'string' || argType === 'number') {\n            classes.push(arg);\n          } else if (Array.isArray(arg)) {\n            classes.push(classNames.apply(null, arg));\n          } else if (argType === 'object') {\n            for (var key in arg) {\n              if (hasOwn.call(arg, key) && arg[key]) {\n                classes.push(key);\n              }\n            }\n          }\n        }\n        return classes.join(' ');\n      }\n      if ( true && module.exports) {\n        module.exports = classNames;\n      } else if (false) {} else {\n        window.classNames = classNames;\n      }\n    })();\n  });\n\n  // @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\n  function findInArray(array /*: Array<any> | TouchList*/, callback /*: Function*/) /*: any*/{\n    for (var i = 0, length = array.length; i < length; i++) {\n      if (callback.apply(callback, [array[i], i, array])) return array[i];\n    }\n  }\n  function isFunction(func /*: any*/) /*: boolean*/{\n    return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n  }\n  function isNum(num /*: any*/) /*: boolean*/{\n    return typeof num === 'number' && !isNaN(num);\n  }\n  function int(a /*: string*/) /*: number*/{\n    return _parseInt(a, 10);\n  }\n  function dontSetMe(props /*: Object*/, propName /*: string*/, componentName /*: string*/) {\n    if (props[propName]) {\n      return new Error('Invalid prop ' + propName + ' passed to ' + componentName + ' - do not set this, set it on the child.');\n    }\n  }\n  var prefixes = ['Moz', 'Webkit', 'O', 'ms'];\n  function getPrefix() /*: string*/{\n    var prop /*: string*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';\n\n    // Checking specifically for 'window.document' is for pseudo-browser server-side\n    // environments that define 'window' as the global context.\n    // E.g. React-rails (see https://github.com/reactjs/react-rails/pull/84)\n    if (typeof window === 'undefined' || typeof window.document === 'undefined') return '';\n    var style = window.document.documentElement.style;\n    if (prop in style) return '';\n    for (var i = 0; i < prefixes.length; i++) {\n      if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];\n    }\n    return '';\n  }\n  function browserPrefixToKey(prop /*: string*/, prefix /*: string*/) /*: string*/{\n    return prefix ? '' + prefix + kebabToTitleCase(prop) : prop;\n  }\n  function kebabToTitleCase(str /*: string*/) /*: string*/{\n    var out = '';\n    var shouldCapitalize = true;\n    for (var i = 0; i < str.length; i++) {\n      if (shouldCapitalize) {\n        out += str[i].toUpperCase();\n        shouldCapitalize = false;\n      } else if (str[i] === '-') {\n        shouldCapitalize = true;\n      } else {\n        out += str[i];\n      }\n    }\n    return out;\n  }\n\n  // Default export is the prefix itself, like 'Moz', 'Webkit', etc\n  // Note that you may have to re-test for certain things; for instance, Chrome 50\n  // can handle unprefixed `transform`, but not unprefixed `user-select`\n  var browserPrefix = getPrefix();\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n  var createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        _Object$defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n  var defineProperty = function defineProperty(obj, key, value) {\n    if (key in obj) {\n      _Object$defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  };\n  var _extends = _Object$assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  var inherits = function inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(superClass));\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n  var possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (_typeof(call) === \"object\" || typeof call === \"function\") ? call : self;\n  };\n  var slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n      try {\n        for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n      return _arr;\n    }\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (_isIterable(Object(arr))) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  /*:: import type {ControlPosition, PositionOffsetControlPosition, MouseTouchEvent} from './types';*/\n\n  var matchesSelectorFunc = '';\n  function matchesSelector(el /*: Node*/, selector /*: string*/) /*: boolean*/{\n    if (!matchesSelectorFunc) {\n      matchesSelectorFunc = findInArray(['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'], function (method) {\n        // $FlowIgnore: Doesn't think elements are indexable\n        return isFunction(el[method]);\n      });\n    }\n\n    // Might not be found entirely (not an Element?) - in that case, bail\n    // $FlowIgnore: Doesn't think elements are indexable\n    if (!isFunction(el[matchesSelectorFunc])) return false;\n\n    // $FlowIgnore: Doesn't think elements are indexable\n    return el[matchesSelectorFunc](selector);\n  }\n\n  // Works up the tree to the draggable itself attempting to match selector.\n  function matchesSelectorAndParentsTo(el /*: Node*/, selector /*: string*/, baseNode /*: Node*/) /*: boolean*/{\n    var node = el;\n    do {\n      if (matchesSelector(node, selector)) return true;\n      if (node === baseNode) return false;\n      node = node.parentNode;\n    } while (node);\n    return false;\n  }\n  function addEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/) /*: void*/{\n    if (!el) {\n      return;\n    }\n    if (el.attachEvent) {\n      el.attachEvent('on' + event, handler);\n    } else if (el.addEventListener) {\n      el.addEventListener(event, handler, true);\n    } else {\n      // $FlowIgnore: Doesn't think elements are indexable\n      el['on' + event] = handler;\n    }\n  }\n  function removeEvent(el /*: ?Node*/, event /*: string*/, handler /*: Function*/) /*: void*/{\n    if (!el) {\n      return;\n    }\n    if (el.detachEvent) {\n      el.detachEvent('on' + event, handler);\n    } else if (el.removeEventListener) {\n      el.removeEventListener(event, handler, true);\n    } else {\n      // $FlowIgnore: Doesn't think elements are indexable\n      el['on' + event] = null;\n    }\n  }\n  function outerHeight(node /*: HTMLElement*/) /*: number*/{\n    // This is deliberately excluding margin for our calculations, since we are using\n    // offsetTop which is including margin. See getBoundPosition\n    var height = node.clientHeight;\n    var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n    height += int(computedStyle.borderTopWidth);\n    height += int(computedStyle.borderBottomWidth);\n    return height;\n  }\n  function outerWidth(node /*: HTMLElement*/) /*: number*/{\n    // This is deliberately excluding margin for our calculations, since we are using\n    // offsetLeft which is including margin. See getBoundPosition\n    var width = node.clientWidth;\n    var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n    width += int(computedStyle.borderLeftWidth);\n    width += int(computedStyle.borderRightWidth);\n    return width;\n  }\n  function innerHeight(node /*: HTMLElement*/) /*: number*/{\n    var height = node.clientHeight;\n    var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n    height -= int(computedStyle.paddingTop);\n    height -= int(computedStyle.paddingBottom);\n    return height;\n  }\n  function innerWidth(node /*: HTMLElement*/) /*: number*/{\n    var width = node.clientWidth;\n    var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n    width -= int(computedStyle.paddingLeft);\n    width -= int(computedStyle.paddingRight);\n    return width;\n  }\n\n  // Get from offsetParent\n  function offsetXYFromParent(evt /*: {clientX: number, clientY: number}*/, offsetParent /*: HTMLElement*/) /*: ControlPosition*/{\n    var isBody = offsetParent === offsetParent.ownerDocument.body;\n    var offsetParentRect = isBody ? {\n      left: 0,\n      top: 0\n    } : offsetParent.getBoundingClientRect();\n    var x = evt.clientX + offsetParent.scrollLeft - offsetParentRect.left;\n    var y = evt.clientY + offsetParent.scrollTop - offsetParentRect.top;\n    return {\n      x: x,\n      y: y\n    };\n  }\n  function createCSSTransform(controlPos /*: ControlPosition*/, positionOffset /*: PositionOffsetControlPosition*/) /*: Object*/{\n    var translation = getTranslation(controlPos, positionOffset, 'px');\n    return defineProperty({}, browserPrefixToKey('transform', browserPrefix), translation);\n  }\n  function createSVGTransform(controlPos /*: ControlPosition*/, positionOffset /*: PositionOffsetControlPosition*/) /*: string*/{\n    var translation = getTranslation(controlPos, positionOffset, '');\n    return translation;\n  }\n  function getTranslation(_ref2, positionOffset /*: PositionOffsetControlPosition*/, unitSuffix /*: string*/) /*: string*/{\n    var x = _ref2.x,\n      y = _ref2.y;\n    var translation = 'translate(' + x + unitSuffix + ',' + y + unitSuffix + ')';\n    if (positionOffset) {\n      var defaultX = '' + (typeof positionOffset.x === 'string' ? positionOffset.x : positionOffset.x + unitSuffix);\n      var defaultY = '' + (typeof positionOffset.y === 'string' ? positionOffset.y : positionOffset.y + unitSuffix);\n      translation = 'translate(' + defaultX + ', ' + defaultY + ')' + translation;\n    }\n    return translation;\n  }\n  function getTouch(e /*: MouseTouchEvent*/, identifier /*: number*/) /*: ?{clientX: number, clientY: number}*/{\n    return e.targetTouches && findInArray(e.targetTouches, function (t) {\n      return identifier === t.identifier;\n    }) || e.changedTouches && findInArray(e.changedTouches, function (t) {\n      return identifier === t.identifier;\n    });\n  }\n  function getTouchIdentifier(e /*: MouseTouchEvent*/) /*: ?number*/{\n    if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;\n    if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;\n  }\n\n  // User-select Hacks:\n  //\n  // Useful for preventing blue highlights all over everything when dragging.\n\n  // Note we're passing `document` b/c we could be iframed\n  function addUserSelectStyles(doc /*: ?Document*/) {\n    if (!doc) return;\n    var styleEl = doc.getElementById('react-draggable-style-el');\n    if (!styleEl) {\n      styleEl = doc.createElement('style');\n      styleEl.type = 'text/css';\n      styleEl.id = 'react-draggable-style-el';\n      styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {all: inherit;}\\n';\n      styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {all: inherit;}\\n';\n      doc.getElementsByTagName('head')[0].appendChild(styleEl);\n    }\n    if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');\n  }\n  function removeUserSelectStyles(doc /*: ?Document*/) {\n    try {\n      if (doc && doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection');\n      // $FlowIgnore: IE\n      if (doc.selection) {\n        // $FlowIgnore: IE\n        doc.selection.empty();\n      } else {\n        window.getSelection().removeAllRanges(); // remove selection caused by scroll\n      }\n    } catch (e) {\n      // probably IE\n    }\n  }\n  function styleHacks() /*: Object*/{\n    var childStyle /*: Object*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    // Workaround IE pointer events; see #51\n    // https://github.com/mzabriskie/react-draggable/issues/51#issuecomment-103488278\n    return _extends({\n      touchAction: 'none'\n    }, childStyle);\n  }\n  function addClassName(el /*: HTMLElement*/, className /*: string*/) {\n    if (el.classList) {\n      el.classList.add(className);\n    } else {\n      if (!el.className.match(new RegExp('(?:^|\\\\s)' + className + '(?!\\\\S)'))) {\n        el.className += ' ' + className;\n      }\n    }\n  }\n  function removeClassName(el /*: HTMLElement*/, className /*: string*/) {\n    if (el.classList) {\n      el.classList.remove(className);\n    } else {\n      el.className = el.className.replace(new RegExp('(?:^|\\\\s)' + className + '(?!\\\\S)', 'g'), '');\n    }\n  }\n\n  /*:: import type Draggable from '../Draggable';*/\n  /*:: import type {Bounds, ControlPosition, DraggableData, MouseTouchEvent} from './types';*/\n  /*:: import type DraggableCore from '../DraggableCore';*/\n\n  function getBoundPosition(draggable /*: Draggable*/, x /*: number*/, y /*: number*/) /*: [number, number]*/{\n    // If no bounds, short-circuit and move on\n    if (!draggable.props.bounds) return [x, y];\n\n    // Clone new bounds\n    var bounds = draggable.props.bounds;\n    bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);\n    var node = findDOMNode(draggable);\n    if (typeof bounds === 'string') {\n      var ownerDocument = node.ownerDocument;\n      var ownerWindow = ownerDocument.defaultView;\n      var boundNode = void 0;\n      if (bounds === 'parent') {\n        boundNode = node.parentNode;\n      } else {\n        boundNode = ownerDocument.querySelector(bounds);\n      }\n      if (!(boundNode instanceof ownerWindow.HTMLElement)) {\n        throw new Error('Bounds selector \"' + bounds + '\" could not find an element.');\n      }\n      var nodeStyle = ownerWindow.getComputedStyle(node);\n      var boundNodeStyle = ownerWindow.getComputedStyle(boundNode);\n      // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n      bounds = {\n        left: -node.offsetLeft + int(boundNodeStyle.paddingLeft) + int(nodeStyle.marginLeft),\n        top: -node.offsetTop + int(boundNodeStyle.paddingTop) + int(nodeStyle.marginTop),\n        right: innerWidth(boundNode) - outerWidth(node) - node.offsetLeft + int(boundNodeStyle.paddingRight) - int(nodeStyle.marginRight),\n        bottom: innerHeight(boundNode) - outerHeight(node) - node.offsetTop + int(boundNodeStyle.paddingBottom) - int(nodeStyle.marginBottom)\n      };\n    }\n\n    // Keep x and y below right and bottom limits...\n    if (isNum(bounds.right)) x = Math.min(x, bounds.right);\n    if (isNum(bounds.bottom)) y = Math.min(y, bounds.bottom);\n\n    // But above left and top limits.\n    if (isNum(bounds.left)) x = Math.max(x, bounds.left);\n    if (isNum(bounds.top)) y = Math.max(y, bounds.top);\n    return [x, y];\n  }\n  function snapToGrid(grid /*: [number, number]*/, pendingX /*: number*/, pendingY /*: number*/) /*: [number, number]*/{\n    var x = Math.round(pendingX / grid[0]) * grid[0];\n    var y = Math.round(pendingY / grid[1]) * grid[1];\n    return [x, y];\n  }\n  function canDragX(draggable /*: Draggable*/) /*: boolean*/{\n    return draggable.props.axis === 'both' || draggable.props.axis === 'x';\n  }\n  function canDragY(draggable /*: Draggable*/) /*: boolean*/{\n    return draggable.props.axis === 'both' || draggable.props.axis === 'y';\n  }\n\n  // Get {x, y} positions from event.\n  function getControlPosition(e /*: MouseTouchEvent*/, touchIdentifier /*: ?number*/, draggableCore /*: DraggableCore*/) /*: ?ControlPosition*/{\n    var touchObj = typeof touchIdentifier === 'number' ? getTouch(e, touchIdentifier) : null;\n    if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch\n    var node = findDOMNode(draggableCore);\n    // User can provide an offsetParent if desired.\n    var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;\n    return offsetXYFromParent(touchObj || e, offsetParent);\n  }\n\n  // Create an data object exposed by <DraggableCore>'s events\n  function createCoreData(draggable /*: DraggableCore*/, x /*: number*/, y /*: number*/) /*: DraggableData*/{\n    var state = draggable.state;\n    var isStart = !isNum(state.lastX);\n    var node = findDOMNode(draggable);\n    if (isStart) {\n      // If this is our first move, use the x and y as last coords.\n      return {\n        node: node,\n        deltaX: 0,\n        deltaY: 0,\n        lastX: x,\n        lastY: y,\n        x: x,\n        y: y\n      };\n    } else {\n      // Otherwise calculate proper values.\n      return {\n        node: node,\n        deltaX: x - state.lastX,\n        deltaY: y - state.lastY,\n        lastX: state.lastX,\n        lastY: state.lastY,\n        x: x,\n        y: y\n      };\n    }\n  }\n\n  // Create an data exposed by <Draggable>'s events\n  function createDraggableData(draggable /*: Draggable*/, coreData /*: DraggableData*/) /*: DraggableData*/{\n    var scale = draggable.props.scale;\n    return {\n      node: coreData.node,\n      x: draggable.state.x + coreData.deltaX / scale,\n      y: draggable.state.y + coreData.deltaY / scale,\n      deltaX: coreData.deltaX / scale,\n      deltaY: coreData.deltaY / scale,\n      lastX: draggable.state.x,\n      lastY: draggable.state.y\n    };\n  }\n\n  // A lot faster than stringify/parse\n  function cloneBounds(bounds /*: Bounds*/) /*: Bounds*/{\n    return {\n      left: bounds.left,\n      top: bounds.top,\n      right: bounds.right,\n      bottom: bounds.bottom\n    };\n  }\n  function findDOMNode(draggable /*: Draggable | DraggableCore*/) /*: HTMLElement*/{\n    var node = ReactDOM.findDOMNode(draggable);\n    if (!node) {\n      throw new Error('<DraggableCore>: Unmounted during event!');\n    }\n    // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME\n    return node;\n  }\n\n  /*eslint no-console:0*/\n  function log() {}\n\n  /*:: import type {EventHandler, MouseTouchEvent} from './utils/types';*/\n\n  // Simple abstraction for dragging events names.\n  /*:: import type {Element as ReactElement} from 'react';*/\n  var eventsFor = {\n    touch: {\n      start: 'touchstart',\n      move: 'touchmove',\n      stop: 'touchend'\n    },\n    mouse: {\n      start: 'mousedown',\n      move: 'mousemove',\n      stop: 'mouseup'\n    }\n  };\n\n  // Default to mouse events.\n  var dragEventFor = eventsFor.mouse;\n\n  /*:: type DraggableCoreState = {\n    dragging: boolean,\n    lastX: number,\n    lastY: number,\n    touchIdentifier: ?number\n  };*/\n  /*:: export type DraggableBounds = {\n    left: number,\n    right: number,\n    top: number,\n    bottom: number,\n  };*/\n  /*:: export type DraggableData = {\n    node: HTMLElement,\n    x: number, y: number,\n    deltaX: number, deltaY: number,\n    lastX: number, lastY: number,\n  };*/\n  /*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void;*/\n  /*:: export type ControlPosition = {x: number, y: number};*/\n  /*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/\n\n  //\n  // Define <DraggableCore>.\n  //\n  // <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can\n  // work well with libraries that require more control over the element.\n  //\n\n  /*:: export type DraggableCoreProps = {\n    allowAnyClick: boolean,\n    cancel: string,\n    children: ReactElement<any>,\n    disabled: boolean,\n    enableUserSelectHack: boolean,\n    offsetParent: HTMLElement,\n    grid: [number, number],\n    handle: string,\n    onStart: DraggableEventHandler,\n    onDrag: DraggableEventHandler,\n    onStop: DraggableEventHandler,\n    onMouseDown: (e: MouseEvent) => void,\n  };*/\n\n  var DraggableCore = function (_React$Component) {\n    inherits(DraggableCore, _React$Component);\n    function DraggableCore() {\n      var _context3;\n      var _ref;\n      var _temp, _this, _ret;\n      classCallCheck(this, DraggableCore);\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = DraggableCore.__proto__ || _Object$getPrototypeOf(DraggableCore)).call.apply(_ref, _concatInstanceProperty(_context3 = [this]).call(_context3, args))), _this), _this.state = {\n        dragging: false,\n        // Used while dragging to determine deltas.\n        lastX: NaN,\n        lastY: NaN,\n        touchIdentifier: null\n      }, _this.handleDragStart = function (e) {\n        // Make it possible to attach event handlers on top of this one.\n        _this.props.onMouseDown(e);\n\n        // Only accept left-clicks.\n        if (!_this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false;\n\n        // Get nodes. Be sure to grab relative document (could be iframed)\n        var thisNode = ReactDOM.findDOMNode(_this);\n        if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {\n          throw new Error('<DraggableCore> not mounted on DragStart!');\n        }\n        var ownerDocument = thisNode.ownerDocument;\n\n        // Short circuit if handle or cancel prop was provided and selector doesn't match.\n\n        if (_this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || _this.props.handle && !matchesSelectorAndParentsTo(e.target, _this.props.handle, thisNode) || _this.props.cancel && matchesSelectorAndParentsTo(e.target, _this.props.cancel, thisNode)) {\n          return;\n        }\n\n        // Set touch identifier in component state if this is a touch event. This allows us to\n        // distinguish between individual touches on multitouch screens by identifying which\n        // touchpoint was set to this element.\n        var touchIdentifier = getTouchIdentifier(e);\n        _this.setState({\n          touchIdentifier: touchIdentifier\n        });\n\n        // Get the current drag point from the event. This is used as the offset.\n        var position = getControlPosition(e, touchIdentifier, _this);\n        if (position == null) return; // not possible but satisfies flow\n        var x = position.x,\n          y = position.y;\n\n        // Create an event object with all the data parents need to make a decision here.\n\n        var coreEvent = createCoreData(_this, x, y);\n\n        // Call event handler. If it returns explicit false, cancel.\n        log('calling', _this.props.onStart);\n        var shouldUpdate = _this.props.onStart(e, coreEvent);\n        if (shouldUpdate === false) return;\n\n        // Add a style to the body to disable user-select. This prevents text from\n        // being selected all over the page.\n        if (_this.props.enableUserSelectHack) addUserSelectStyles(ownerDocument);\n\n        // Initiate dragging. Set the current x and y as offsets\n        // so we know how much we've moved during the drag. This allows us\n        // to drag elements around even if they have been moved, without issue.\n        _this.setState({\n          dragging: true,\n          lastX: x,\n          lastY: y\n        });\n\n        // Add events to the document directly so we catch when the user's mouse/touch moves outside of\n        // this element. We use different events depending on whether or not we have detected that this\n        // is a touch-capable device.\n        addEvent(ownerDocument, dragEventFor.move, _this.handleDrag);\n        addEvent(ownerDocument, dragEventFor.stop, _this.handleDragStop);\n      }, _this.handleDrag = function (e) {\n        // Prevent scrolling on mobile devices, like ipad/iphone.\n        if (e.type === 'touchmove') e.preventDefault();\n\n        // Get the current drag point from the event. This is used as the offset.\n        var position = getControlPosition(e, _this.state.touchIdentifier, _this);\n        if (position == null) return;\n        var x = position.x,\n          y = position.y;\n\n        // Snap to grid if prop has been provided\n\n        if (Array.isArray(_this.props.grid)) {\n          var _deltaX = x - _this.state.lastX,\n            _deltaY = y - _this.state.lastY;\n          var _snapToGrid = snapToGrid(_this.props.grid, _deltaX, _deltaY);\n          var _snapToGrid2 = slicedToArray(_snapToGrid, 2);\n          _deltaX = _snapToGrid2[0];\n          _deltaY = _snapToGrid2[1];\n          if (!_deltaX && !_deltaY) return; // skip useless drag\n          x = _this.state.lastX + _deltaX, y = _this.state.lastY + _deltaY;\n        }\n        var coreEvent = createCoreData(_this, x, y);\n\n        // Call event handler. If it returns explicit false, trigger end.\n        var shouldUpdate = _this.props.onDrag(e, coreEvent);\n        if (shouldUpdate === false) {\n          try {\n            // $FlowIgnore\n            _this.handleDragStop(new MouseEvent('mouseup'));\n          } catch (err) {\n            // Old browsers\n            var event = document.createEvent('MouseEvents') /*: any*/ /*: MouseTouchEvent*/;\n            // I see why this insanity was deprecated\n            // $FlowIgnore\n            event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            _this.handleDragStop(event);\n          }\n          return;\n        }\n        _this.setState({\n          lastX: x,\n          lastY: y\n        });\n      }, _this.handleDragStop = function (e) {\n        if (!_this.state.dragging) return;\n        var position = getControlPosition(e, _this.state.touchIdentifier, _this);\n        if (position == null) return;\n        var x = position.x,\n          y = position.y;\n        var coreEvent = createCoreData(_this, x, y);\n        var thisNode = ReactDOM.findDOMNode(_this);\n        if (thisNode) {\n          // Remove user-select hack\n          if (_this.props.enableUserSelectHack) removeUserSelectStyles(thisNode.ownerDocument);\n        }\n\n        // Reset the el.\n        _this.setState({\n          dragging: false,\n          lastX: NaN,\n          lastY: NaN\n        });\n\n        // Call event handler\n        _this.props.onStop(e, coreEvent);\n        if (thisNode) {\n          removeEvent(thisNode.ownerDocument, dragEventFor.move, _this.handleDrag);\n          removeEvent(thisNode.ownerDocument, dragEventFor.stop, _this.handleDragStop);\n        }\n      }, _this.onMouseDown = function (e) {\n        dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse\n\n        return _this.handleDragStart(e);\n      }, _this.onMouseUp = function (e) {\n        dragEventFor = eventsFor.mouse;\n        return _this.handleDragStop(e);\n      }, _this.onTouchStart = function (e) {\n        // We're on a touch device now, so change the event handlers\n        dragEventFor = eventsFor.touch;\n        return _this.handleDragStart(e);\n      }, _this.onTouchEnd = function (e) {\n        // We're on a touch device now, so change the event handlers\n        dragEventFor = eventsFor.touch;\n        return _this.handleDragStop(e);\n      }, _temp), possibleConstructorReturn(_this, _ret);\n    }\n    createClass(DraggableCore, [{\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        // Remove any leftover event handlers. Remove both touch and mouse handlers in case\n        // some browser quirk caused a touch event to fire during a mouse move, or vice versa.\n        var thisNode = ReactDOM.findDOMNode(this);\n        if (thisNode) {\n          var ownerDocument = thisNode.ownerDocument;\n          removeEvent(ownerDocument, eventsFor.mouse.move, this.handleDrag);\n          removeEvent(ownerDocument, eventsFor.touch.move, this.handleDrag);\n          removeEvent(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);\n          removeEvent(ownerDocument, eventsFor.touch.stop, this.handleDragStop);\n          if (this.props.enableUserSelectHack) removeUserSelectStyles(ownerDocument);\n        }\n      }\n\n      // Same as onMouseDown (start drag), but now consider this a touch device.\n    }, {\n      key: 'render',\n      value: function render() {\n        // Reuse the child provided\n        // This makes it flexible to use whatever element is wanted (div, ul, etc)\n        return React.cloneElement(React.Children.only(this.props.children), {\n          style: styleHacks(this.props.children.props.style),\n          // Note: mouseMove handler is attached to document so it will still function\n          // when the user drags quickly and leaves the bounds of the element.\n          onMouseDown: this.onMouseDown,\n          onTouchStart: this.onTouchStart,\n          onMouseUp: this.onMouseUp,\n          onTouchEnd: this.onTouchEnd\n        });\n      }\n    }]);\n    return DraggableCore;\n  }(React.Component);\n  DraggableCore.displayName = 'DraggableCore';\n  DraggableCore.propTypes = {\n    /**\n     * `allowAnyClick` allows dragging using any mouse button.\n     * By default, we only accept the left button.\n     *\n     * Defaults to `false`.\n     */\n    allowAnyClick: propTypes.bool,\n    /**\n     * `disabled`, if true, stops the <Draggable> from dragging. All handlers,\n     * with the exception of `onMouseDown`, will not fire.\n     */\n    disabled: propTypes.bool,\n    /**\n     * By default, we add 'user-select:none' attributes to the document body\n     * to prevent ugly text selection during drag. If this is causing problems\n     * for your app, set this to `false`.\n     */\n    enableUserSelectHack: propTypes.bool,\n    /**\n     * `offsetParent`, if set, uses the passed DOM node to compute drag offsets\n     * instead of using the parent node.\n     */\n    offsetParent: function offsetParent(props /*: DraggableCoreProps*/, propName /*: $Keys<DraggableCoreProps>*/) {\n      if (props[propName] && props[propName].nodeType !== 1) {\n        throw new Error('Draggable\\'s offsetParent must be a DOM Node.');\n      }\n    },\n    /**\n     * `grid` specifies the x and y that dragging should snap to.\n     */\n    grid: propTypes.arrayOf(propTypes.number),\n    /**\n     * `scale` specifies the scale of the area you are dragging inside of. It allows\n     * the drag deltas to scale correctly with how far zoomed in/out you are.\n     */\n    scale: propTypes.number,\n    /**\n     * `handle` specifies a selector to be used as the handle that initiates drag.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   let App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable handle=\".handle\">\n     *              <div>\n     *                  <div className=\"handle\">Click me to drag</div>\n     *                  <div>This is some other content</div>\n     *              </div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    handle: propTypes.string,\n    /**\n     * `cancel` specifies a selector to be used to prevent drag initialization.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   let App = React.createClass({\n     *       render: function () {\n     *           return(\n     *               <Draggable cancel=\".cancel\">\n     *                   <div>\n     *                     <div className=\"cancel\">You can't drag from here</div>\n     *                     <div>Dragging here works fine</div>\n     *                   </div>\n     *               </Draggable>\n     *           );\n     *       }\n     *   });\n     * ```\n     */\n    cancel: propTypes.string,\n    /**\n     * Called when dragging starts.\n     * If this function returns the boolean false, dragging will be canceled.\n     */\n    onStart: propTypes.func,\n    /**\n     * Called while dragging.\n     * If this function returns the boolean false, dragging will be canceled.\n     */\n    onDrag: propTypes.func,\n    /**\n     * Called when dragging stops.\n     * If this function returns the boolean false, the drag will remain active.\n     */\n    onStop: propTypes.func,\n    /**\n     * A workaround option which can be passed if onMouseDown needs to be accessed,\n     * since it'll always be blocked (as there is internal use of onMouseDown)\n     */\n    onMouseDown: propTypes.func,\n    /**\n     * These properties should be defined on the child, not here.\n     */\n    className: dontSetMe,\n    style: dontSetMe,\n    transform: dontSetMe\n  };\n  DraggableCore.defaultProps = {\n    allowAnyClick: false,\n    // by default only accept left click\n    cancel: null,\n    disabled: false,\n    enableUserSelectHack: true,\n    offsetParent: null,\n    handle: null,\n    grid: null,\n    transform: null,\n    onStart: function onStart() {},\n    onDrag: function onDrag() {},\n    onStop: function onStop() {},\n    onMouseDown: function onMouseDown() {}\n  };\n\n  /*:: import type {DraggableEventHandler} from './utils/types';*/\n  /*:: import type {Element as ReactElement} from 'react';*/\n  /*:: type DraggableState = {\n    dragging: boolean,\n    dragged: boolean,\n    x: number, y: number,\n    slackX: number, slackY: number,\n    isElementSVG: boolean\n  };*/\n\n  //\n  // Define <Draggable>\n  //\n\n  /*:: export type DraggableProps = {\n    ...$Exact<DraggableCoreProps>,\n    axis: 'both' | 'x' | 'y' | 'none',\n    bounds: DraggableBounds | string | false,\n    defaultClassName: string,\n    defaultClassNameDragging: string,\n    defaultClassNameDragged: string,\n    defaultPosition: ControlPosition,\n    positionOffset: PositionOffsetControlPosition,\n    position: ControlPosition,\n    scale: number\n  };*/\n\n  var Draggable = function (_React$Component) {\n    inherits(Draggable, _React$Component);\n    function Draggable(props /*: DraggableProps*/) {\n      classCallCheck(this, Draggable);\n      var _this = possibleConstructorReturn(this, (Draggable.__proto__ || _Object$getPrototypeOf(Draggable)).call(this, props));\n      _this.onDragStart = function (e, coreData) {\n        // Short-circuit if user's callback killed it.\n        var shouldStart = _this.props.onStart(e, createDraggableData(_this, coreData));\n        // Kills start event on core as well, so move handlers are never bound.\n        if (shouldStart === false) return false;\n        _this.setState({\n          dragging: true,\n          dragged: true\n        });\n      };\n      _this.onDrag = function (e, coreData) {\n        if (!_this.state.dragging) return false;\n        var uiData = createDraggableData(_this, coreData);\n        var newState /*: $Shape<DraggableState>*/ = {\n          x: uiData.x,\n          y: uiData.y\n        };\n\n        // Keep within bounds.\n        if (_this.props.bounds) {\n          // Save original x and y.\n          var _x = newState.x,\n            _y = newState.y;\n\n          // Add slack to the values used to calculate bound position. This will ensure that if\n          // we start removing slack, the element won't react to it right away until it's been\n          // completely removed.\n\n          newState.x += _this.state.slackX;\n          newState.y += _this.state.slackY;\n\n          // Get bound position. This will ceil/floor the x and y within the boundaries.\n\n          var _getBoundPosition = getBoundPosition(_this, newState.x, newState.y),\n            _getBoundPosition2 = slicedToArray(_getBoundPosition, 2),\n            newStateX = _getBoundPosition2[0],\n            newStateY = _getBoundPosition2[1];\n          newState.x = newStateX;\n          newState.y = newStateY;\n\n          // Recalculate slack by noting how much was shaved by the boundPosition handler.\n          newState.slackX = _this.state.slackX + (_x - newState.x);\n          newState.slackY = _this.state.slackY + (_y - newState.y);\n\n          // Update the event we fire to reflect what really happened after bounds took effect.\n          uiData.x = newState.x;\n          uiData.y = newState.y;\n          uiData.deltaX = newState.x - _this.state.x;\n          uiData.deltaY = newState.y - _this.state.y;\n        }\n\n        // Short-circuit if user's callback killed it.\n        var shouldUpdate = _this.props.onDrag(e, uiData);\n        if (shouldUpdate === false) return false;\n        _this.setState(newState);\n      };\n      _this.onDragStop = function (e, coreData) {\n        if (!_this.state.dragging) return false;\n\n        // Short-circuit if user's callback killed it.\n        var shouldStop = _this.props.onStop(e, createDraggableData(_this, coreData));\n        if (shouldStop === false) return false;\n        var newState /*: $Shape<DraggableState>*/ = {\n          dragging: false,\n          slackX: 0,\n          slackY: 0\n        };\n\n        // If this is a controlled component, the result of this operation will be to\n        // revert back to the old position. We expect a handler on `onDragStop`, at the least.\n        var controlled = Boolean(_this.props.position);\n        if (controlled) {\n          var _this$props$position = _this.props.position,\n            _x2 = _this$props$position.x,\n            _y2 = _this$props$position.y;\n          newState.x = _x2;\n          newState.y = _y2;\n        }\n        _this.setState(newState);\n      };\n      _this.state = {\n        // Whether or not we are currently dragging.\n        dragging: false,\n        // Whether or not we have been dragged before.\n        dragged: false,\n        // Current transform x and y.\n        x: props.position ? props.position.x : props.defaultPosition.x,\n        y: props.position ? props.position.y : props.defaultPosition.y,\n        // Used for compensating for out-of-bounds drags\n        slackX: 0,\n        slackY: 0,\n        // Can only determine if SVG after mounting\n        isElementSVG: false\n      };\n      if (props.position && !(props.onDrag || props.onStop)) {\n        // eslint-disable-next-line no-console\n        console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' + 'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' + '`position` of this element.');\n      }\n      return _this;\n    }\n    createClass(Draggable, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        // Check to see if the element passed is an instanceof SVGElement\n        if (typeof window.SVGElement !== 'undefined' && ReactDOM.findDOMNode(this) instanceof window.SVGElement) {\n          this.setState({\n            isElementSVG: true\n          });\n        }\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps /*: Object*/) {\n        // Set x/y if position has changed\n        if (nextProps.position && (!this.props.position || nextProps.position.x !== this.props.position.x || nextProps.position.y !== this.props.position.y)) {\n          this.setState({\n            x: nextProps.position.x,\n            y: nextProps.position.y\n          });\n        }\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        this.setState({\n          dragging: false\n        }); // prevents invariant if unmounted while dragging\n      }\n    }, {\n      key: 'render',\n      value: function render() /*: ReactElement<any>*/{\n        var _classNames;\n        var style = {},\n          svgTransform = null;\n\n        // If this is controlled, we don't want to move it - unless it's dragging.\n        var controlled = Boolean(this.props.position);\n        var draggable = !controlled || this.state.dragging;\n        var position = this.props.position || this.props.defaultPosition;\n        var transformOpts = {\n          // Set left if horizontal drag is enabled\n          x: canDragX(this) && draggable ? this.state.x : position.x,\n          // Set top if vertical drag is enabled\n          y: canDragY(this) && draggable ? this.state.y : position.y\n        };\n\n        // If this element was SVG, we use the `transform` attribute.\n        if (this.state.isElementSVG) {\n          svgTransform = createSVGTransform(transformOpts, this.props.positionOffset);\n        } else {\n          // Add a CSS transform to move the element around. This allows us to move the element around\n          // without worrying about whether or not it is relatively or absolutely positioned.\n          // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n          // has a clean slate.\n          style = createCSSTransform(transformOpts, this.props.positionOffset);\n        }\n        var _props = this.props,\n          defaultClassName = _props.defaultClassName,\n          defaultClassNameDragging = _props.defaultClassNameDragging,\n          defaultClassNameDragged = _props.defaultClassNameDragged;\n        var children = React.Children.only(this.props.children);\n\n        // Mark with class while dragging\n        var className = classnames(children.props.className || '', defaultClassName, (_classNames = {}, defineProperty(_classNames, defaultClassNameDragging, this.state.dragging), defineProperty(_classNames, defaultClassNameDragged, this.state.dragged), _classNames));\n\n        // Reuse the child provided\n        // This makes it flexible to use whatever element is wanted (div, ul, etc)\n        return React.createElement(DraggableCore, _extends({}, this.props, {\n          onStart: this.onDragStart,\n          onDrag: this.onDrag,\n          onStop: this.onDragStop\n        }), React.cloneElement(children, {\n          className: className,\n          style: _extends({}, children.props.style, style),\n          transform: svgTransform\n        }));\n      }\n    }]);\n    return Draggable;\n  }(React.Component);\n  Draggable.displayName = 'Draggable';\n  Draggable.propTypes = _extends({}, DraggableCore.propTypes, {\n    /**\n     * `axis` determines which axis the draggable can move.\n     *\n     *  Note that all callbacks will still return data as normal. This only\n     *  controls flushing to the DOM.\n     *\n     * 'both' allows movement horizontally and vertically.\n     * 'x' limits movement to horizontal axis.\n     * 'y' limits movement to vertical axis.\n     * 'none' limits all movement.\n     *\n     * Defaults to 'both'.\n     */\n    axis: propTypes.oneOf(['both', 'x', 'y', 'none']),\n    /**\n     * `bounds` determines the range of movement available to the element.\n     * Available values are:\n     *\n     * 'parent' restricts movement within the Draggable's parent node.\n     *\n     * Alternatively, pass an object with the following properties, all of which are optional:\n     *\n     * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n     *\n     * All values are in px.\n     *\n     * Example:\n     *\n     * ```jsx\n     *   let App = React.createClass({\n     *       render: function () {\n     *         return (\n     *            <Draggable bounds={{right: 300, bottom: 300}}>\n     *              <div>Content</div>\n     *           </Draggable>\n     *         );\n     *       }\n     *   });\n     * ```\n     */\n    bounds: propTypes.oneOfType([propTypes.shape({\n      left: propTypes.number,\n      right: propTypes.number,\n      top: propTypes.number,\n      bottom: propTypes.number\n    }), propTypes.string, propTypes.oneOf([false])]),\n    defaultClassName: propTypes.string,\n    defaultClassNameDragging: propTypes.string,\n    defaultClassNameDragged: propTypes.string,\n    /**\n     * `defaultPosition` specifies the x and y that the dragged item should start at\n     *\n     * Example:\n     *\n     * ```jsx\n     *      let App = React.createClass({\n     *          render: function () {\n     *              return (\n     *                  <Draggable defaultPosition={{x: 25, y: 25}}>\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n     *                  </Draggable>\n     *              );\n     *          }\n     *      });\n     * ```\n     */\n    defaultPosition: propTypes.shape({\n      x: propTypes.number,\n      y: propTypes.number\n    }),\n    positionOffset: propTypes.shape({\n      x: propTypes.oneOfType([propTypes.number, propTypes.string]),\n      y: propTypes.oneOfType([propTypes.number, propTypes.string])\n    }),\n    /**\n     * `position`, if present, defines the current position of the element.\n     *\n     *  This is similar to how form elements in React work - if no `position` is supplied, the component\n     *  is uncontrolled.\n     *\n     * Example:\n     *\n     * ```jsx\n     *      let App = React.createClass({\n     *          render: function () {\n     *              return (\n     *                  <Draggable position={{x: 25, y: 25}}>\n     *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n     *                  </Draggable>\n     *              );\n     *          }\n     *      });\n     * ```\n     */\n    position: propTypes.shape({\n      x: propTypes.number,\n      y: propTypes.number\n    }),\n    /**\n     * These properties should be defined on the child, not here.\n     */\n    className: dontSetMe,\n    style: dontSetMe,\n    transform: dontSetMe\n  });\n  Draggable.defaultProps = _extends({}, DraggableCore.defaultProps, {\n    axis: 'both',\n    bounds: false,\n    defaultClassName: 'react-draggable',\n    defaultClassNameDragging: 'react-draggable-dragging',\n    defaultClassNameDragged: 'react-draggable-dragged',\n    defaultPosition: {\n      x: 0,\n      y: 0\n    },\n    position: null,\n    scale: 1\n  });\n\n  // Previous versions of this lib exported <Draggable> as the root export. As to not break\n  // them, or TypeScript, we export *both* as the root and as 'default'.\n  // See https://github.com/mzabriskie/react-draggable/pull/254\n  // and https://github.com/mzabriskie/react-draggable/issues/266\n  Draggable.default = Draggable;\n  Draggable.DraggableCore = DraggableCore;\n  return Draggable;\n});\n\n//# sourceURL=webpack://kd-libs/../../node_modules/react-grid-layout/node_modules/react-draggable/dist/react-draggable.js?");

/***/ }),

/***/ "../../node_modules/core-js-pure/actual/is-iterable.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js-pure/actual/is-iterable.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar parent = __webpack_require__(/*! ../stable/is-iterable */ \"../../node_modules/core-js-pure/stable/is-iterable.js\");\n\nmodule.exports = parent;\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/core-js-pure/actual/is-iterable.js?");

/***/ }),

/***/ "../../node_modules/core-js-pure/es/is-iterable.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js-pure/es/is-iterable.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n__webpack_require__(/*! ../modules/es.array.iterator */ \"../../node_modules/core-js-pure/modules/es.array.iterator.js\");\n__webpack_require__(/*! ../modules/es.string.iterator */ \"../../node_modules/core-js-pure/modules/es.string.iterator.js\");\nvar isIterable = __webpack_require__(/*! ../internals/is-iterable */ \"../../node_modules/core-js-pure/internals/is-iterable.js\");\n\nmodule.exports = isIterable;\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/core-js-pure/es/is-iterable.js?");

/***/ }),

/***/ "../../node_modules/core-js-pure/es/symbol/for.js":
/*!********************************************************!*\
  !*** ../../node_modules/core-js-pure/es/symbol/for.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\n__webpack_require__(/*! ../../modules/es.symbol */ \"../../node_modules/core-js-pure/modules/es.symbol.js\");\nvar path = __webpack_require__(/*! ../../internals/path */ \"../../node_modules/core-js-pure/internals/path.js\");\n\nmodule.exports = path.Symbol['for'];\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/core-js-pure/es/symbol/for.js?");

/***/ }),

/***/ "../../node_modules/core-js-pure/features/is-iterable.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js-pure/features/is-iterable.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ../full/is-iterable */ \"../../node_modules/core-js-pure/full/is-iterable.js\");\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/core-js-pure/features/is-iterable.js?");

/***/ }),

/***/ "../../node_modules/core-js-pure/full/is-iterable.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js-pure/full/is-iterable.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar parent = __webpack_require__(/*! ../actual/is-iterable */ \"../../node_modules/core-js-pure/actual/is-iterable.js\");\n\nmodule.exports = parent;\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/core-js-pure/full/is-iterable.js?");

/***/ }),

/***/ "../../node_modules/core-js-pure/internals/is-iterable.js":
/*!****************************************************************!*\
  !*** ../../node_modules/core-js-pure/internals/is-iterable.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar classof = __webpack_require__(/*! ../internals/classof */ \"../../node_modules/core-js-pure/internals/classof.js\");\nvar hasOwn = __webpack_require__(/*! ../internals/has-own-property */ \"../../node_modules/core-js-pure/internals/has-own-property.js\");\nvar isNullOrUndefined = __webpack_require__(/*! ../internals/is-null-or-undefined */ \"../../node_modules/core-js-pure/internals/is-null-or-undefined.js\");\nvar wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ \"../../node_modules/core-js-pure/internals/well-known-symbol.js\");\nvar Iterators = __webpack_require__(/*! ../internals/iterators */ \"../../node_modules/core-js-pure/internals/iterators.js\");\n\nvar ITERATOR = wellKnownSymbol('iterator');\nvar $Object = Object;\n\nmodule.exports = function (it) {\n  if (isNullOrUndefined(it)) return false;\n  var O = $Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    || hasOwn(Iterators, classof(O));\n};\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/core-js-pure/internals/is-iterable.js?");

/***/ }),

/***/ "../../node_modules/core-js-pure/stable/is-iterable.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js-pure/stable/is-iterable.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar parent = __webpack_require__(/*! ../es/is-iterable */ \"../../node_modules/core-js-pure/es/is-iterable.js\");\n__webpack_require__(/*! ../modules/web.dom-collections.iterator */ \"../../node_modules/core-js-pure/modules/web.dom-collections.iterator.js\");\n\nmodule.exports = parent;\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/core-js-pure/stable/is-iterable.js?");

/***/ }),

/***/ "../../node_modules/core-js-pure/stable/symbol/for.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js-pure/stable/symbol/for.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar parent = __webpack_require__(/*! ../../es/symbol/for */ \"../../node_modules/core-js-pure/es/symbol/for.js\");\n\nmodule.exports = parent;\n\n\n//# sourceURL=webpack://kd-libs/../../node_modules/core-js-pure/stable/symbol/for.js?");

/***/ })

}]);